name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: LuneX ${{ steps.get_version.outputs.version }}
          body: |
            ## What's Changed
            
            See CHANGELOG.md for detailed changes.
            
            ## Downloads
            
            - **macOS**: Download `LuneX-macos-${{ steps.get_version.outputs.version }}.zip`
            - **Source**: Download `LuneX-${{ steps.get_version.outputs.version }}-source.tar.gz`
            - **Checksums**: Download `CHECKSUMS.txt` for verification
            
            ## Installation
            
            ### macOS
            ```bash
            unzip LuneX-macos-${{ steps.get_version.outputs.version }}.zip
            chmod +x LuneX-macos-${{ steps.get_version.outputs.version }}
            sudo mv LuneX-macos-${{ steps.get_version.outputs.version }} /usr/local/bin/lunex
            ```
            
            ### Build from Source
            ```bash
            tar -xzf LuneX-${{ steps.get_version.outputs.version }}-source.tar.gz
            cd LuneX-${{ steps.get_version.outputs.version }}
            cargo build --release
            sudo cp target/release/LuneX /usr/local/bin/lunex
            ```
          draft: false
          prerelease: false

  build-macos:
    name: Build macOS Binary
    runs-on: macos-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        run: cargo build --release

      - name: Create binary archive
        run: |
          cd target/release
          zip ../../LuneX-macos-${{ needs.create-release.outputs.version }}.zip LuneX
          gzip -c LuneX > ../../LuneX-macos-${{ needs.create-release.outputs.version }}.gz

      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./LuneX-macos-${{ needs.create-release.outputs.version }}.zip
          asset_name: LuneX-macos-${{ needs.create-release.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload macOS GZ
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./LuneX-macos-${{ needs.create-release.outputs.version }}.gz
          asset_name: LuneX-macos-${{ needs.create-release.outputs.version }}.gz
          asset_content_type: application/gzip

  create-source-archives:
    name: Create Source Archives
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create source archives
        run: |
          # Create tar.gz source archive
          git archive --format=tar.gz --prefix=LuneX-${{ needs.create-release.outputs.version }}/ ${{ needs.create-release.outputs.version }} -o LuneX-${{ needs.create-release.outputs.version }}-source.tar.gz
          
          # Create zip source archive
          git archive --format=zip --prefix=LuneX-${{ needs.create-release.outputs.version }}/ ${{ needs.create-release.outputs.version }} -o LuneX-${{ needs.create-release.outputs.version }}-source.zip

      - name: Upload source tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./LuneX-${{ needs.create-release.outputs.version }}-source.tar.gz
          asset_name: LuneX-${{ needs.create-release.outputs.version }}-source.tar.gz
          asset_content_type: application/gzip

      - name: Upload source zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./LuneX-${{ needs.create-release.outputs.version }}-source.zip
          asset_name: LuneX-${{ needs.create-release.outputs.version }}-source.zip
          asset_content_type: application/zip

  create-checksums:
    name: Create Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-macos, create-source-archives]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create checksums
        run: |
          # This would need to be adapted to work with the downloaded artifacts
          # For now, this is a placeholder - in practice, you'd collect all the files
          # and generate checksums for them
          echo "Creating checksums file..."
          echo "# SHA256 Checksums for LuneX ${{ needs.create-release.outputs.version }}" > CHECKSUMS.txt
          echo "# Verify with: shasum -a 256 -c CHECKSUMS.txt" >> CHECKSUMS.txt
          echo "" >> CHECKSUMS.txt

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./CHECKSUMS.txt
          asset_name: CHECKSUMS.txt
          asset_content_type: text/plain
