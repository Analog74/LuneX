{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{C7BB2008-3371-43F0-A815-079CB694410C}",
  "Source": "local CLASS = {}\n\n--// SERVICES //--\n\nlocal PLAYERS_SERVICE = game:GetService(\"Players\")\nlocal RUN_SERVICE = game:GetService(\"RunService\")\nlocal USER_INPUT_SERVICE = game:GetService(\"UserInputService\")\n\n--// CONSTANTS //--\n\nlocal LOCAL_PLAYER = PLAYERS_SERVICE.LocalPlayer\nlocal MOUSE = LOCAL_PLAYER:GetMouse()\n\nlocal UPDATE_UNIQUE_KEY = \"OTS_CAMERA_SYSTEM_UPDATE\"\n\n--// VARIABLES //--\n\n\n\n--// CONSTRUCTOR //--\n\nfunction CLASS.new()\n\t\n\t--// Events //--\n\tlocal activeCameraSettingsChangedEvent = Instance.new(\"BindableEvent\")\n\tlocal characterAlignmentChangedEvent = Instance.new(\"BindableEvent\")\n\tlocal mouseStepChangedEvent = Instance.new(\"BindableEvent\")\n\tlocal shoulderDirectionChangedEvent = Instance.new(\"BindableEvent\")\n\tlocal enabledEvent = Instance.new(\"BindableEvent\")\n\tlocal disabledEvent = Instance.new(\"BindableEvent\")\n\t----\n\t\n\tlocal dataTable = setmetatable(\n\t\t{\n\t\t\t\n\t\t\t--// Properties //--\n\t\t\tSavedCameraSettings = nil,\n\t\t\tSavedMouseBehavior = nil,\n\t\t\tActiveCameraSettings = nil,\n\t\t\tHorizontalAngle = 0,\n\t\t\tVerticalAngle = 0,\n\t\t\tShoulderDirection = 1,\n\t\t\t----\n\t\t\t\n\t\t\t--// Flags //--\n\t\t\tIsCharacterAligned = false,\n\t\t\tIsMouseSteppedIn = false,\n\t\t\tIsEnabled = false,\n\t\t\t----\n\t\t\t\n\t\t\t--// Events //--\n\t\t\tActiveCameraSettingsChangedEvent = activeCameraSettingsChangedEvent,\n\t\t\tActiveCameraSettingsChanged = activeCameraSettingsChangedEvent.Event,\n\t\t\tCharacterAlignmentChangedEvent = characterAlignmentChangedEvent,\n\t\t\tCharacterAlignmentChanged = characterAlignmentChangedEvent.Event,\n\t\t\tMouseStepChangedEvent = mouseStepChangedEvent,\n\t\t\tMouseStepChanged = mouseStepChangedEvent.Event,\n\t\t\tShoulderDirectionChangedEvent = shoulderDirectionChangedEvent,\n\t\t\tShoulderDirectionChanged = shoulderDirectionChangedEvent.Event,\n\t\t\tEnabledEvent = enabledEvent,\n\t\t\tEnabled = enabledEvent.Event,\n\t\t\tDisabledEvent = disabledEvent,\n\t\t\tDisabled = disabledEvent.Event,\n\t\t\t----\n\t\t\t\n\t\t\t--// Configurations //--\n\t\t\tVerticalAngleLimits = NumberRange.new(-45, 45),\n\t\t\t----\n\t\t\t\n\t\t\t--// Camera Settings //--\n\t\t\tCameraSettings = {\n\t\t\t\t\n\t\t\t\tDefaultShoulder = {\n\t\t\t\t\tFieldOfView = 75,\n\t\t\t\t\tOffset = Vector3.new(0, 2.5, 8),\n\t\t\t\t\tSensitivity = 3,\n\t\t\t\t\tLerpSpeed = 0.5\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tZoomedShoulder = {\n\t\t\t\t\tFieldOfView = 75,\n\t\t\t\t\tOffset = Vector3.new(0, 2.5, 8),\n\t\t\t\t\tSensitivity = 3,\n\t\t\t\t\tLerpSpeed = 0.5\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t----\n\t\t\t\n\t\t},\n\t\tCLASS\n\t)\n\tlocal proxyTable = setmetatable(\n\t\t{\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t__index = function(self, index)\n\t\t\t\treturn dataTable[index]\n\t\t\tend,\n\t\t\t__newindex = function(self, index, newValue)\n\t\t\t\tdataTable[index] = newValue\n\t\t\tend\n\t\t}\n\t)\n\t\n\treturn proxyTable\nend\n\n--// FUNCTIONS //--\n\nlocal function Lerp(x, y, a)\n\treturn x + (y - x) * a\nend\n\n--// METHODS //--\n\n--// //--\nfunction CLASS:SetActiveCameraSettings(cameraSettings)\n\tassert(cameraSettings ~= nil, \"OTS Camera System Argument Error: Argument 1 nil or missing\")\n\tassert(typeof(cameraSettings) == \"string\", \"OTS Camera System Argument Error: string expected, got \" .. typeof(cameraSettings))\n\tassert(self.CameraSettings[cameraSettings] ~= nil, \"OTS Camera System Argument Error: Attempt to set unrecognized camera settings \" .. cameraSettings)\n\tif (self.IsEnabled == false) then\n\t\twarn(\"OTS Camera System Logic Warning: Attempt to change active camera settings without enabling OTS camera system\")\n\t\treturn\n\tend\n\n\tself.ActiveCameraSettings = cameraSettings\n\tself.ActiveCameraSettingsChangedEvent:Fire(cameraSettings)\nend\n\nfunction CLASS:SetCharacterAlignment(aligned)\n\tassert(aligned ~= nil, \"OTS Camera System Argument Error: Argument 1 nil or missing\")\n\tassert(typeof(aligned) == \"boolean\", \"OTS Camera System Argument Error: boolean expected, got \" .. typeof(aligned))\n\tif (self.IsEnabled == false) then\n\t\twarn(\"OTS Camera System Logic Warning: Attempt to change character alignment without enabling OTS camera system\")\n\t\treturn\n\tend\n\t\n\tself.IsCharacterAligned = aligned\n\tself.CharacterAlignmentChangedEvent:Fire(aligned)\nend\n\nfunction CLASS:SetMouseStep(steppedIn)\n\tassert(steppedIn ~= nil, \"OTS Camera System Argument Error: Argument 1 nil or missing\")\n\tassert(typeof(steppedIn) == \"boolean\", \"OTS Camera System Argument Error: boolean expected, got \" .. typeof(steppedIn))\n\tif (self.IsEnabled == false) then\n\t\twarn(\"OTS Camera System Logic Warning: Attempt to change mouse step without enabling OTS camera system\")\n\t\treturn\n\tend\n\t\n\tself.IsMouseSteppedIn = steppedIn\n\tself.MouseStepChangedEvent:Fire(steppedIn)\n\tif (steppedIn == true) then\n\t\tUSER_INPUT_SERVICE.MouseBehavior = Enum.MouseBehavior.LockCenter\n\telse\n\t\tUSER_INPUT_SERVICE.MouseBehavior = Enum.MouseBehavior.Default\n\tend\nend\n\nfunction CLASS:SetShoulderDirection(shoulderDirection)\n\tassert(shoulderDirection ~= nil, \"OTS Camera System Argument Error: Argument 1 nil or missing\")\n\tassert(typeof(shoulderDirection) == \"number\", \"OTS Camera System Argument Error: number expected, got \" .. typeof(shoulderDirection))\n\tassert(math.abs(shoulderDirection) == 1, \"OTS Camera System Argument Error: Attempt to set unrecognized shoulder direction \" .. shoulderDirection)\n\tif (self.IsEnabled == false) then\n\t\twarn(\"OTS Camera System Logic Warning: Attempt to change shoulder direction without enabling OTS camera system\")\n\t\treturn\n\tend\n\t\n\tself.ShoulderDirection = shoulderDirection\n\tself.ShoulderDirectionChangedEvent:Fire(shoulderDirection)\nend\n----\n\n--// //--\nfunction CLASS:SaveCameraSettings()\n\tlocal currentCamera = workspace.CurrentCamera\n\tself.SavedCameraSettings = {\n\t\tFieldOfView = currentCamera.FieldOfView,\n\t\tCameraSubject = currentCamera.CameraSubject,\n\t\tCameraType = currentCamera.CameraType\n\t}\nend\n\nfunction CLASS:LoadCameraSettings()\n\tlocal currentCamera = workspace.CurrentCamera\n\tfor setting, value in pairs(self.SavedCameraSettings) do\n\t\tcurrentCamera[setting] = value\n\tend\nend\n----\n\n--// //--\nfunction CLASS:Update()\n\tlocal currentCamera = workspace.CurrentCamera\n\tlocal activeCameraSettings = self.CameraSettings[self.ActiveCameraSettings]\n\t\n\t--// Address mouse behavior and camera type //--\n\tif (self.IsMouseSteppedIn == true) then\n\t\tUSER_INPUT_SERVICE.MouseBehavior = Enum.MouseBehavior.LockCenter\n\telse\n\t\tUSER_INPUT_SERVICE.MouseBehavior = Enum.MouseBehavior.Default\n\tend\n\tcurrentCamera.CameraType = Enum.CameraType.Scriptable\n\t---\n\t\n\t--// Address mouse input //--\n\tlocal mouseDelta = USER_INPUT_SERVICE:GetMouseDelta() * activeCameraSettings.Sensitivity\n\tself.HorizontalAngle -= mouseDelta.X/currentCamera.ViewportSize.X\n\tself.VerticalAngle -= mouseDelta.Y/currentCamera.ViewportSize.Y\n\tself.VerticalAngle = math.rad(math.clamp(math.deg(self.VerticalAngle), self.VerticalAngleLimits.Min, self.VerticalAngleLimits.Max))\n\t----\n\t\n\tlocal character = LOCAL_PLAYER.Character\n\tlocal humanoidRootPart = (character ~= nil) and (character:FindFirstChild(\"HumanoidRootPart\"))\n\tif (humanoidRootPart ~= nil) then\n\t\t\n\t\t--// Lerp field of view //--\n\t\tcurrentCamera.FieldOfView = Lerp(\n\t\t\tcurrentCamera.FieldOfView, \n\t\t\tactiveCameraSettings.FieldOfView, \n\t\t\tactiveCameraSettings.LerpSpeed\n\t\t)\n\t\t----\n\t\t\n\t\t--// Address shoulder direction //--\n\t\tlocal offset = activeCameraSettings.Offset\n\t\toffset = Vector3.new(offset.X * self.ShoulderDirection, offset.Y, offset.Z)\n\t\t----\n\t\t\n\t\t--// Calculate new camera cframe //--\n\t\tlocal newCameraCFrame = CFrame.new(humanoidRootPart.Position) *\n\t\t\tCFrame.Angles(0, self.HorizontalAngle, 0) *\n\t\t\tCFrame.Angles(self.VerticalAngle, 0, 0) *\n\t\t\tCFrame.new(offset)\n\t\t\n\t\tnewCameraCFrame = currentCamera.CFrame:Lerp(newCameraCFrame, activeCameraSettings.LerpSpeed)\n\t\t----\n\t\t\n\t\t--// Raycast for obstructions //--\n\t\tlocal raycastParams = RaycastParams.new()\n\t\traycastParams.FilterDescendantsInstances = {character}\n\t\traycastParams.FilterType = Enum.RaycastFilterType.Blacklist\n\t\tlocal raycastResult = workspace:Raycast(\n\t\t\thumanoidRootPart.Position,\n\t\t\tnewCameraCFrame.p - humanoidRootPart.Position,\n\t\t\traycastParams\n\t\t)\n\t\t----\n\t\t\n\t\t--// Address obstructions if any //--\n\t\tif (raycastResult ~= nil) then\n\t\t\tlocal obstructionDisplacement = (raycastResult.Position - humanoidRootPart.Position)\n\t\t\tlocal obstructionPosition = humanoidRootPart.Position + (obstructionDisplacement.Unit * (obstructionDisplacement.Magnitude - 0.1))\n\t\t\tlocal x,y,z,r00,r01,r02,r10,r11,r12,r20,r21,r22 = newCameraCFrame:components()\n\t\t\tnewCameraCFrame = CFrame.new(obstructionPosition.x, obstructionPosition.y, obstructionPosition.z, r00, r01, r02, r10, r11, r12, r20, r21, r22)\n\t\tend\n\t\t----\n\t\t\n\t\t--// Address character alignment //--\n\t\tif (self.IsCharacterAligned == true) then\n\t\t\tlocal newHumanoidRootPartCFrame = CFrame.new(humanoidRootPart.Position) *\n\t\t\t\tCFrame.Angles(0, self.HorizontalAngle, 0)\n\t\t\thumanoidRootPart.CFrame = humanoidRootPart.CFrame:Lerp(newHumanoidRootPartCFrame, activeCameraSettings.LerpSpeed/2)\n\t\tend\n\t\t----\n\t\t\n\t\tcurrentCamera.CFrame = newCameraCFrame\n\t\t\n\telse\n\t\tself:Disable()\n\tend\nend\n\nfunction CLASS:ConfigureStateForEnabled()\n\tself:SaveCameraSettings()\n\tself.SavedMouseBehavior = USER_INPUT_SERVICE.MouseBehavior\n\tself:SetActiveCameraSettings(\"DefaultShoulder\")\n\tself:SetCharacterAlignment(false)\n\tself:SetMouseStep(true)\n\tself:SetShoulderDirection(1)\n\t\n\t--// Calculate angles //--\n\tlocal cameraCFrame = workspace.CurrentCamera.CFrame\n\tlocal x, y, z = cameraCFrame:ToOrientation()\n\tlocal horizontalAngle = y\n\tlocal verticalAngle = x\n\t----\n\t\n\tself.HorizontalAngle = horizontalAngle\n\tself.VerticalAngle = verticalAngle\nend\n\nfunction CLASS:ConfigureStateForDisabled()\n\tself:LoadCameraSettings()\n\tUSER_INPUT_SERVICE.MouseBehavior = self.SavedMouseBehavior\n\tself:SetActiveCameraSettings(\"DefaultShoulder\")\n\tself:SetCharacterAlignment(false)\n\tself:SetMouseStep(false)\n\tself:SetShoulderDirection(1)\n\tself.HorizontalAngle = 0\n\tself.VerticalAngle = 0\nend\n\nfunction CLASS:Enable()\n\tassert(self.IsEnabled == false, \"OTS Camera System Logic Error: Attempt to enable without disabling\")\n\t\n\tself.IsEnabled = true\n\tself.EnabledEvent:Fire()\n\tself:ConfigureStateForEnabled()\n\t\n\tRUN_SERVICE:BindToRenderStep(\n\t\tUPDATE_UNIQUE_KEY,\n\t\tEnum.RenderPriority.Camera.Value - 10,\n\t\tfunction()\n\t\t\tif (self.IsEnabled == true) then\n\t\t\t\tself:Update()\n\t\t\tend\n\t\tend\n\t)\nend\n\nfunction CLASS:Disable()\n\tassert(self.IsEnabled == true, \"OTS Camera System Logic Error: Attempt to disable without enabling\")\n\t\n\tself:ConfigureStateForDisabled()\n\tself.IsEnabled = false\n\tself.DisabledEvent:Fire()\n\t\n\tRUN_SERVICE:UnbindFromRenderStep(UPDATE_UNIQUE_KEY)\nend\n----\n\n--// INSTRUCTIONS //--\n\nCLASS.__index = CLASS\n\nlocal singleton = CLASS.new()\n\nUSER_INPUT_SERVICE.InputBegan:Connect(function(inputObject, gameProcessedEvent)\n\tif (gameProcessedEvent == false) and (singleton.IsEnabled == true) then\n\t\tif (inputObject.KeyCode == Enum.KeyCode.Q) then\n\t\t\tsingleton:SetShoulderDirection(-1)\n\t\telseif (inputObject.KeyCode == Enum.KeyCode.E) then\n\t\t\tsingleton:SetShoulderDirection(1)\n\t\tend\n\t\tif (inputObject.UserInputType == Enum.UserInputType.MouseButton2) then\n\t\t\tsingleton:SetActiveCameraSettings(\"ZoomedShoulder\")\n\t\tend\n\t\t\n\t\tif (inputObject.KeyCode == Enum.KeyCode.LeftControl) then\n\t\t\tif (singleton.IsEnabled == true) then\n\t\t\t\tsingleton:SetMouseStep(not singleton.IsMouseSteppedIn)\n\t\t\tend\n\t\tend\n\tend\nend)\n\nUSER_INPUT_SERVICE.InputEnded:Connect(function(inputObject, gameProcessedEvent)\n\tif (gameProcessedEvent == false) and (singleton.IsEnabled == true) then\n\t\tif (inputObject.UserInputType == Enum.UserInputType.MouseButton2) then\n\t\t\tsingleton:SetActiveCameraSettings(\"DefaultShoulder\")\n\t\tend\n\tend\nend)\n\n\nreturn singleton",
  "SourceAssetId": "<unsupported: Int64(5577509886)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 11934957, time: 32320501, random: 7308681896716043950 })>"
}