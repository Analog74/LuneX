{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{F9A349F7-7F29-4A06-AC14-F79526FA21F0}",
  "Source": "-- Camera Shaker\n-- Stephen Leitnick\n-- February 26, 2018\n\n--[[\n\t\n\tCameraShaker.CameraShakeInstance\n\t\n\tcameraShaker = CameraShaker.new(renderPriority, callbackFunction)\n\t\n\tCameraShaker:Start()\n\tCameraShaker:Stop()\n\tCameraShaker:StopSustained([fadeOutTime])\n\tCameraShaker:Shake(shakeInstance)\n\tCameraShaker:ShakeSustain(shakeInstance)\n\tCameraShaker:ShakeOnce(magnitude, roughness [, fadeInTime, fadeOutTime, posInfluence, rotInfluence])\n\tCameraShaker:StartShake(magnitude, roughness [, fadeInTime, posInfluence, rotInfluence])\n\t\n\t\n\t\n\tEXAMPLE:\n\t\n\t\tlocal camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(shakeCFrame)\n\t\t\tcamera.CFrame = playerCFrame * shakeCFrame\n\t\tend)\n\t\t\n\t\tcamShake:Start()\n\t\t\n\t\t-- Explosion shake:\n\t\tcamShake:Shake(CameraShaker.Presets.Explosion)\n\t\t\n\t\twait(1)\n\t\t\n\t\t-- Custom shake:\n\t\tcamShake:ShakeOnce(3, 1, 0.2, 1.5)\n\n\t\t-- Sustained shake:\n\t\tcamShake:ShakeSustain(CameraShaker.Presets.Earthquake)\n\n\t\t-- Stop all sustained shakes:\n\t\tcamShake:StopSustained(1) -- Argument is the fadeout time (defaults to the same as fadein time if not supplied)\n\n\t\t-- Stop only one sustained shake:\n\t\tshakeInstance = camShake:ShakeSustain(CameraShaker.Presets.Earthquake)\n\t\twait(2)\n\t\tshakeInstance:StartFadeOut(1) -- Argument is the fadeout time\n\t\n\t\n\tNOTE:\n\t\n\t\tThis was based entirely on the EZ Camera Shake asset for Unity3D. I was given written\n\t\tpermission by the developer, Road Turtle Games, to port this to Roblox.\n\t\t\n\t\tOriginal asset link: https://assetstore.unity.com/packages/tools/camera/ez-camera-shake-33148\n\n\t\tGitHub repository: https://github.com/Sleitnick/RbxCameraShaker\n\t\n\t\n--]]\n\n\n\nlocal CameraShaker = {}\nCameraShaker.__index = CameraShaker\n\nlocal profileBegin = debug.profilebegin\nlocal profileEnd = debug.profileend\nlocal profileTag = \"CameraShakerUpdate\"\n\nlocal V3 = Vector3.new\nlocal CF = CFrame.new\nlocal ANG = CFrame.Angles\nlocal RAD = math.rad\nlocal v3Zero = V3()\n\nlocal CameraShakeInstance = require(script.CameraShakeInstance)\nlocal CameraShakeState = CameraShakeInstance.CameraShakeState\n\nlocal defaultPosInfluence = V3(0.15, 0.15, 0.15)\nlocal defaultRotInfluence = V3(1, 1, 1)\n\n\nCameraShaker.CameraShakeInstance = CameraShakeInstance\nCameraShaker.Presets = require(script.CameraShakePresets)\n\n\nfunction CameraShaker.new(renderPriority, callback)\n\t\n\tassert(type(renderPriority) == \"number\", \"RenderPriority must be a number (e.g.: Enum.RenderPriority.Camera.Value)\")\n\tassert(type(callback) == \"function\", \"Callback must be a function\")\n\t\n\tlocal self = setmetatable({\n\t\t_running = false;\n\t\t_renderName = \"CameraShaker\";\n\t\t_renderPriority = renderPriority;\n\t\t_posAddShake = v3Zero;\n\t\t_rotAddShake = v3Zero;\n\t\t_camShakeInstances = {};\n\t\t_removeInstances = {};\n\t\t_callback = callback;\n\t}, CameraShaker)\n\t\n\treturn self\n\t\nend\n\n\nfunction CameraShaker:Start()\n\tif (self._running) then return end\n\tself._running = true\n\tlocal callback = self._callback\n\tgame:GetService(\"RunService\"):BindToRenderStep(self._renderName, self._renderPriority, function(dt)\n\t\tprofileBegin(profileTag)\n\t\tlocal cf = self:Update(dt)\n\t\tprofileEnd()\n\t\tcallback(cf)\n\tend)\nend\n\n\nfunction CameraShaker:Stop()\n\tif (not self._running) then return end\n\tgame:GetService(\"RunService\"):UnbindFromRenderStep(self._renderName)\n\tself._running = false\nend\n\n\nfunction CameraShaker:StopSustained(duration)\n\tfor _,c in pairs(self._camShakeInstances) do\n\t\tif (c.fadeOutDuration == 0) then\n\t\t\tc:StartFadeOut(duration or c.fadeInDuration)\n\t\tend\n\tend\nend\n\n\nfunction CameraShaker:Update(dt)\n\t\n\tlocal posAddShake = v3Zero\n\tlocal rotAddShake = v3Zero\n\t\n\tlocal instances = self._camShakeInstances\n\t\n\t-- Update all instances:\n\tfor i = 1,#instances do\n\t\t\n\t\tlocal c = instances[i]\n\t\tlocal state = c:GetState()\n\t\t\n\t\tif (state == CameraShakeState.Inactive and c.DeleteOnInactive) then\n\t\t\tself._removeInstances[#self._removeInstances + 1] = i\n\t\telseif (state ~= CameraShakeState.Inactive) then\n\t\t\tlocal shake = c:UpdateShake(dt)\n\t\t\tposAddShake = posAddShake + (shake * c.PositionInfluence)\n\t\t\trotAddShake = rotAddShake + (shake * c.RotationInfluence)\n\t\tend\n\t\t\n\tend\n\t\n\t-- Remove dead instances:\n\tfor i = #self._removeInstances,1,-1 do\n\t\tlocal instIndex = self._removeInstances[i]\n\t\ttable.remove(instances, instIndex)\n\t\tself._removeInstances[i] = nil\n\tend\n\t\n\treturn CF(posAddShake) *\n\t\t\tANG(0, RAD(rotAddShake.Y), 0) *\n\t\t\tANG(RAD(rotAddShake.X), 0, RAD(rotAddShake.Z))\n\t\nend\n\n\nfunction CameraShaker:Shake(shakeInstance)\n\tassert(type(shakeInstance) == \"table\" and shakeInstance._camShakeInstance, \"ShakeInstance must be of type CameraShakeInstance\")\n\tself._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance\n\treturn shakeInstance\nend\n\n\nfunction CameraShaker:ShakeSustain(shakeInstance)\n\tassert(type(shakeInstance) == \"table\" and shakeInstance._camShakeInstance, \"ShakeInstance must be of type CameraShakeInstance\")\n\tself._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance\n\tshakeInstance:StartFadeIn(shakeInstance.fadeInDuration)\n\treturn shakeInstance\nend\n\n\nfunction CameraShaker:ShakeOnce(magnitude, roughness, fadeInTime, fadeOutTime, posInfluence, rotInfluence)\n\tlocal shakeInstance = CameraShakeInstance.new(magnitude, roughness, fadeInTime, fadeOutTime)\n\tshakeInstance.PositionInfluence = (typeof(posInfluence) == \"Vector3\" and posInfluence or defaultPosInfluence)\n\tshakeInstance.RotationInfluence = (typeof(rotInfluence) == \"Vector3\" and rotInfluence or defaultRotInfluence)\n\tself._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance\n\treturn shakeInstance\nend\n\n\nfunction CameraShaker:StartShake(magnitude, roughness, fadeInTime, posInfluence, rotInfluence)\n\tlocal shakeInstance = CameraShakeInstance.new(magnitude, roughness, fadeInTime)\n\tshakeInstance.PositionInfluence = (typeof(posInfluence) == \"Vector3\" and posInfluence or defaultPosInfluence)\n\tshakeInstance.RotationInfluence = (typeof(rotInfluence) == \"Vector3\" and rotInfluence or defaultRotInfluence)\n\tshakeInstance:StartFadeIn(fadeInTime)\n\tself._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance\n\treturn shakeInstance\nend\n\n\nreturn CameraShaker",
  "SourceAssetId": "<unsupported: Int64(1461025953)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 11934950, time: 32320501, random: 7308681896716043950 })>"
}