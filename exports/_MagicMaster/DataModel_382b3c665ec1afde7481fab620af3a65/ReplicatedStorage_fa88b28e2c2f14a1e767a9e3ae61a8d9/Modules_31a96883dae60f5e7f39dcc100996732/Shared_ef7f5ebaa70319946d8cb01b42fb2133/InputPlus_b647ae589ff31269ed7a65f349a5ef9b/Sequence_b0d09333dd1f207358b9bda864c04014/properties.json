{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{E6B90408-2BB8-4D5B-A6DD-1F0C1C66B70B}",
  "Source": "local sequence = {}\nlocal utils = require(script.Parent.Utils)\nlocal ActiveSequences = {}\n\nlocal SequenceTable = {\n\tDestroy = function(self)\n\t\tlocal Info = ActiveSequences[self.Index]\n\t\tif Info then\n\t\t\tInfo.End:Destroy()\n\t\t\tInfo.Pressed:Destroy()\n\t\t\ttable.remove(ActiveSequences,self.Index)\n\t\tend\n\tend,\n\tCancel = function(self)\n\t\tlocal Info = ActiveSequences[self.Index]\n\t\tif Info then\n\t\t\tInfo.Current -= 1\n\t\t\tif Info.Current < 0 then\n\t\t\t\tInfo.Current = 0\n\t\t\t\tInfo.Previous = Info.PreviouseBefore\n\t\t\tend\n\t\tend\n\tend,\n\tReset = function(self)\n\t\tlocal Info = ActiveSequences[self.Index]\n\t\tif Info then\n\t\t\tInfo.Current = 0\n\t\t\tInfo.Previous = nil\n\t\t\tInfo.PreviouseBefore = nil\n\t\tend\n\tend,\n\tToggle = function(self,Value,Duration)\n\t\tlocal Info = ActiveSequences[self.Index]\n\t\tif Info then\n\t\t\tInfo.Enabled = Value\n\t\tend\n\t\tif Duration then\n\t\t\tcoroutine.wrap(function()\n\t\t\t\ttask.wait(Duration)\n\t\t\t\tif Info.Enabled == Value then\n\t\t\t\t\tInfo.Enabled = not Value\n\t\t\t\tend\n\t\t\tend)()\n\t\tend\n\tend,\n}\n\nsequence.new = function(Delay,...) -- Delay between each key - set to nil for no delay ; All the keys in the combo in an order\n\tlocal Keys = {...}\n\tif #Keys == 0 then warn('Atleast one key required for the sequence') return end\n\tlocal Name = ''\n\tfor i , v in ipairs(Keys) do\n\t\tName ..= utils.GetKeyFromEnum(v)\n\t\tif i ~= #Keys then\n\t\t\tName ..= '+'\n\t\tend\n\tend\n\n\tif utils.CheckDuplicate(ActiveSequences,Delay,Name) then warn('A sequence with the same keys already exist') return end\n\t\n\tlocal End = Instance.new('BindableEvent')\n\tEnd.Name = 'Sequence'..Name..'End'\n\tEnd.Parent = game.ReplicatedStorage.EventStorage\n\t\n\tlocal Pressed = Instance.new('BindableEvent')\n\tPressed.Name = 'Sequence'..Name..'Pressed'\n\tPressed.Parent = game.ReplicatedStorage.EventStorage\n\t\n\ttable.insert(ActiveSequences,{\n\t\tDelay = Delay,\n\t\tKeys = Keys,\n\t\tProgress = {},\n\t\tEnd = End,\n\t\tPressed = Pressed,\n\t\tName = Name,\n\t\tIndex = #ActiveSequences + 1,\n\t\tCurrent = 0,\n\t\tEnabled = true\n\t})\n\t\n\tlocal Clone = {}\n\t\n\tClone.End = End.Event\n\tClone.Pressed = Pressed.Event\n\tClone.Index = #ActiveSequences\n\t\n\tfor i , v in pairs(SequenceTable) do\n\t\tClone[i] = v\n\tend\n\t\n\treturn Clone\nend\n\nsequence.Hook = function(Input,gp)\n\tfor i , v in ipairs(ActiveSequences) do\n\t\tif v.Enabled then\n\t\t\tif v.Delay then\n\t\t\t\tlocal CanCheck = not v.Previous or (os.clock()-v.Previous) <= v.Delay\n\t\t\t\tif not CanCheck then\n\t\t\t\t\tv.Current = 0\n\t\t\t\t\tv.Progress = {}\n\t\t\t\t\tv.Previous = nil\n\t\t\t\t\tv.PreviouseBefore = nil\n\t\t\t\tend\n\t\t\t\tlocal Key = v.Keys[v.Current+1]\n\t\t\t\tif Key == Input[utils.GetMiddleFromEnum(Key)] then\n\t\t\t\t\tv.PreviouseBefore = v.Previous\n\t\t\t\t\tv.Current += 1 \n\t\t\t\t\tv.Previous = os.clock()\n\t\t\t\t\tv.Pressed:Fire(Key,gp,v.Current)\n\t\t\t\t\tif v.Current >= #v.Keys then\n\t\t\t\t\t\tv.End:Fire()\n\t\t\t\t\t\tv.Current = 0\n\t\t\t\t\t\tv.Previous = nil\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tlocal Key = v.Keys[v.Current+1]\n\t\t\t\tif Key == Input[utils.GetMiddleFromEnum(Key)] then\n\t\t\t\t\tv.Current += 1 \n\t\t\t\t\tv.Pressed:Fire(Key,gp,v.Current)\n\t\t\t\t\tif v.Current >= #v.Keys then\n\t\t\t\t\t\tv.End:Fire()\n\t\t\t\t\t\tv.Current = 0\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\n\nreturn sequence\n",
  "SourceAssetId": "<unsupported: Int64(-1)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 25784, time: 142155861, random: 1232354692393223026 })>"
}