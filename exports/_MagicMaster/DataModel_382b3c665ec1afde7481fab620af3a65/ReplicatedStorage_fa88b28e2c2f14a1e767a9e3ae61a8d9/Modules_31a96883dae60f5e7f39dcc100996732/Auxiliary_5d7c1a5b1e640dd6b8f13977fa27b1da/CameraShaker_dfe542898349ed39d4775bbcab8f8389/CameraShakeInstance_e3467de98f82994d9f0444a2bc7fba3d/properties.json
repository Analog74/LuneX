{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{7D9197DD-9D1A-4346-A8BF-0CDA96F033FA}",
  "Source": "-- Camera Shake Instance\r\n-- Stephen Leitnick\r\n-- February 26, 2018\r\n\r\n--[[\r\n\t\r\n\tcameraShakeInstance = CameraShakeInstance.new(magnitude, roughness, fadeInTime, fadeOutTime)\r\n\t\r\n--]]\r\n\r\n\r\n\r\nlocal CameraShakeInstance = {}\r\nCameraShakeInstance.__index = CameraShakeInstance\r\n\r\nlocal V3 = Vector3.new\r\nlocal NOISE = math.noise\r\n\r\n\r\nCameraShakeInstance.CameraShakeState = {\r\n\tFadingIn = 0;\r\n\tFadingOut = 1;\r\n\tSustained = 2;\r\n\tInactive = 3;\r\n}\r\n\r\n\r\nfunction CameraShakeInstance.new(magnitude, roughness, fadeInTime, fadeOutTime)\r\n\t\r\n\tif (fadeInTime == nil) then fadeInTime = 0 end\r\n\tif (fadeOutTime == nil) then fadeOutTime = 0 end\r\n\t\r\n\tassert(type(magnitude) == \"number\", \"Magnitude must be a number\")\r\n\tassert(type(roughness) == \"number\", \"Roughness must be a number\")\r\n\tassert(type(fadeInTime) == \"number\", \"FadeInTime must be a number\")\r\n\tassert(type(fadeOutTime) == \"number\", \"FadeOutTime must be a number\")\r\n\t\r\n\tlocal self = setmetatable({\r\n\t\tMagnitude = magnitude;\r\n\t\tRoughness = roughness;\r\n\t\tPositionInfluence = V3();\r\n\t\tRotationInfluence = V3();\r\n\t\tDeleteOnInactive = true;\r\n\t\troughMod = 1;\r\n\t\tmagnMod = 1;\r\n\t\tfadeOutDuration = fadeOutTime;\r\n\t\tfadeInDuration = fadeInTime;\r\n\t\tsustain = (fadeInTime > 0);\r\n\t\tcurrentFadeTime = (fadeInTime > 0 and 0 or 1);\r\n\t\ttick = Random.new():NextNumber(-100, 100);\r\n\t\t_camShakeInstance = true;\r\n\t}, CameraShakeInstance)\r\n\t\r\n\treturn self\r\n\t\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:UpdateShake(dt)\r\n\t\r\n\tlocal _tick = self.tick\r\n\tlocal currentFadeTime = self.currentFadeTime\r\n\t\r\n\tlocal offset = V3(\r\n\t\tNOISE(_tick, 0) * 0.5,\r\n\t\tNOISE(0, _tick) * 0.5,\r\n\t\tNOISE(_tick, _tick) * 0.5\r\n\t)\r\n\t\r\n\tif (self.fadeInDuration > 0 and self.sustain) then\r\n\t\tif (currentFadeTime < 1) then\r\n\t\t\tcurrentFadeTime = currentFadeTime + (dt / self.fadeInDuration)\r\n\t\telseif (self.fadeOutDuration > 0) then\r\n\t\t\tself.sustain = false\r\n\t\tend\r\n\tend\r\n\t\r\n\tif (not self.sustain) then\r\n\t\tcurrentFadeTime = currentFadeTime - (dt / self.fadeOutDuration)\r\n\tend\r\n\t\r\n\tif (self.sustain) then\r\n\t\tself.tick = _tick + (dt * self.Roughness * self.roughMod)\r\n\telse\r\n\t\tself.tick = _tick + (dt * self.Roughness * self.roughMod * currentFadeTime)\r\n\tend\r\n\t\r\n\tself.currentFadeTime = currentFadeTime\r\n\t\r\n\treturn offset * self.Magnitude * self.magnMod * currentFadeTime\r\n\t\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:StartFadeOut(fadeOutTime)\r\n\tif (fadeOutTime == 0) then\r\n\t\tself.currentFadeTime = 0\r\n\tend\r\n\tself.fadeOutDuration = fadeOutTime\r\n\tself.fadeInDuration = 0\r\n\tself.sustain = false\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:StartFadeIn(fadeInTime)\r\n\tif (fadeInTime == 0) then\r\n\t\tself.currentFadeTime = 1\r\n\tend\r\n\tself.fadeInDuration = fadeInTime or self.fadeInDuration\r\n\tself.fadeOutDuration = 0\r\n\tself.sustain = true\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:GetScaleRoughness()\r\n\treturn self.roughMod\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:SetScaleRoughness(v)\r\n\tself.roughMod = v\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:GetScaleMagnitude()\r\n\treturn self.magnMod\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:SetScaleMagnitude(v)\r\n\tself.magnMod = v\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:GetNormalizedFadeTime()\r\n\treturn self.currentFadeTime\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:IsShaking()\r\n\treturn (self.currentFadeTime > 0 or self.sustain)\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:IsFadingOut()\r\n\treturn ((not self.sustain) and self.currentFadeTime > 0)\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:IsFadingIn()\r\n\treturn (self.currentFadeTime < 1 and self.sustain and self.fadeInDuration > 0)\r\nend\r\n\r\n\r\nfunction CameraShakeInstance:GetState()\r\n\tif (self:IsFadingIn()) then\r\n\t\treturn CameraShakeInstance.CameraShakeState.FadingIn\r\n\telseif (self:IsFadingOut()) then\r\n\t\treturn CameraShakeInstance.CameraShakeState.FadingOut\r\n\telseif (self:IsShaking()) then\r\n\t\treturn CameraShakeInstance.CameraShakeState.Sustained\r\n\telse\r\n\t\treturn CameraShakeInstance.CameraShakeState.Inactive\r\n\tend\r\nend\r\n\r\n\r\nreturn CameraShakeInstance",
  "SourceAssetId": "<unsupported: Int64(-1)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 11934951, time: 32320501, random: 7308681896716043950 })>"
}