{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{7A364AC4-9A3B-417C-B7CE-1739B18AC24B}",
  "Source": "local MAX_TRIES = 20\nlocal ZERO3 = Vector3.new(0, 0, 0)\n\n-- Class\n\nlocal GJK = {}\nGJK.__index = GJK\n\n-- Private Functions\n\nlocal function tripleProduct(a, b, c)\n\treturn b * c:Dot(a) - a * c:Dot(b)\nend\n\nlocal function containsOrigin(self, simplex, direction)\n\tlocal a = simplex[#simplex]\n\tlocal ao = -a\n\n\tif (#simplex == 4) then\n\t\tlocal b, c, d = simplex[3], simplex[2], simplex[1]\n\t\tlocal ab, ac, ad = b - a, c - a, d - a\n\t\tlocal abc, acd, adb = ab:Cross(ac), ac:Cross(ad), ad:Cross(ab)\n\t\t\n\t\tabc = abc:Dot(ad) > 0 and -abc or abc\n\t\tacd = acd:Dot(ab) > 0 and -acd or acd\n\t\tadb = adb:Dot(ac) > 0 and -adb or adb\n\t\t\n\t\tif (abc:Dot(ao) > 0) then\n\t\t\ttable.remove(simplex, 1)\n\t\t\tdirection = abc\n\t\telseif (acd:Dot(ao) > 0) then\n\t\t\ttable.remove(simplex, 2)\n\t\t\tdirection = acd\n\t\telseif (adb:Dot(ao) > 0) then\n\t\t\ttable.remove(simplex, 3)\n\t\t\tdirection = adb\n\t\telse\n\t\t\treturn true\n\t\tend\n\telseif (#simplex == 3) then\n\t\tlocal b, c = simplex[2], simplex[1]\n\t\tlocal ab, ac = b - a, c - a\n\t\t\n\t\tlocal abc = ab:Cross(ac)\n\t\tlocal abPerp = tripleProduct(ac, ab, ab).Unit\n\t\tlocal acPerp = tripleProduct(ab, ac, ac).Unit\n\t\t\n\t\tif (abPerp:Dot(ao) > 0) then\n\t\t\ttable.remove(simplex, 1)\n\t\t\tdirection = abPerp\n\t\telseif (acPerp:Dot(ao) > 0) then\n\t\t\ttable.remove(simplex, 2)\n\t\t\tdirection = acPerp\n\t\telse\n\t\t\tlocal isV3 = ((a - a) == ZERO3)\n\t\t\tif (not isV3) then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\tdirection = abc:Dot(ao) > 0 and abc or -abc\n\t\t\tend\n\t\tend\n\telse\n\t\tlocal b = simplex[1]\n\t\tlocal ab = b - a\n\t\tlocal bcPerp = tripleProduct(ab, ao, ab).Unit\n\t\tdirection = bcPerp\n\tend\n\t\n\treturn false, direction\nend\n\n-- Public Constructors\n\nfunction GJK.new(SetA, SetB, CentroidA, CentroidB, SupportA, SupportB)\n\tlocal self = setmetatable({}, GJK)\n\t\n\tself.SetA = SetA\n\tself.SetB = SetB\n\tself.CentroidA = CentroidA\n\tself.CentroidB = CentroidB\n\tself.SupportA = SupportA\n\tself.SupportB = SupportB\n\n\treturn self\nend\n\n-- Public Methods\n\nfunction GJK:IsColliding()\n\tlocal direction = (self.CentroidA - self.CentroidB).Unit\n\tlocal simplex = {self.SupportA(self.SetA, direction) - self.SupportB(self.SetB, -direction)}\n\t\n\tdirection = -direction\n\t\n\tfor i = 1, MAX_TRIES do\n\t\ttable.insert(simplex, self.SupportA(self.SetA, direction) - self.SupportB(self.SetB, -direction))\n\t\t\n\t\tif (simplex[#simplex]:Dot(direction) <= 0) then\n\t\t\treturn false\n\t\telse\n\t\t\tlocal passed, newDirection = containsOrigin(self, simplex, direction)\n\t\t\t\n\t\t\tif (passed) then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t\n\t\t\tdirection = newDirection\n\t\tend\n\tend\n\t\n\treturn false\nend\n\n--\n\nreturn GJK",
  "SourceAssetId": "<unsupported: Int64(-1)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 25864, time: 142155861, random: 1232354692393223026 })>"
}