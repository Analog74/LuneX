{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{E4CD3BCB-E11F-4F31-BF3C-279EEB67C47B}",
  "Source": "local RunService = game:GetService('RunService')\nlocal HttpService = game:GetService('HttpService')\n\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\nlocal RemotesFolder = ReplicatedStorage:WaitForChild('Remotes')\nlocal DataRemoteEvent = RemotesFolder:WaitForChild('DataRemote')\n\n-- // Module // --\nlocal Module = {}\n\nif RunService:IsServer() then\n\t\n\tModule.Replications = { Private = {}, Public = {}, }\n\t\n\t-- localplayer is optional, if no local player then replicate to all.\n\tfunction Module:SetData( Category, Data, PlayerTable )\n\t\tif PlayerTable then\n\t\t\t-- private data for a select group of players\n\t\t\ttable.insert(Module.Replications.Private, { Category, Data, PlayerTable })\n\t\telse\n\t\t\t-- public data\n\t\t\tModule.Replications.Public [ Category ] = Data\n\t\tend\n\tend\n\n\tfunction Module:RemoveData( Category )\n\t\tif Module.Replications.Public [ Category ] then\n\t\t\tModule.Replications.Public [ Category ] = nil\n\t\tend\n\t\tfor index, replicationInfo in ipairs( Module.Replications.Private ) do\n\t\t\tif replicationInfo[1] == Category then\n\t\t\t\ttable.remove(Module.Replications.Private, index)\n\t\t\tend\n\t\tend\n\tend\n\t\n\tfunction Module:UpdateData( category, data, playerTable )\n\t\tif playerTable then\n\t\t\tfor _, LocalPlayer in ipairs( playerTable ) do\n\t\t\t\tDataRemoteEvent:FireClient(LocalPlayer, category, data)\n\t\t\tend\n\t\telse\n\t\t\tDataRemoteEvent:FireAllClients(category, data)\n\t\tend\n\tend\n\t\n\tDataRemoteEvent.OnServerEvent:Connect(function( LocalPlayer )\n\t\tfor publicCategory, publicData in pairs( Module.Replications.Public ) do\n\t\t\tDataRemoteEvent:FireClient( LocalPlayer, publicCategory, publicData )\n\t\tend\n\t\tfor _, replicationInfo in ipairs( Module.Replications.Private ) do\n\t\t\tlocal Category, Data, PlayerTable = unpack( replicationInfo )\n\t\t\tif table.find( PlayerTable, LocalPlayer ) then\n\t\t\t\tDataRemoteEvent:FireClient( LocalPlayer, Category, Data )\n\t\t\tend\n\t\tend\n\tend)\n\t\n\ttask.spawn(function()\n\t\tlocal comparisonCache = { } -- [category] = cache_string\n\t\twhile task.wait(0.2) do\n\t\t\t-- public data, replicates to all\n\t\t\tfor publicCategory, publicData in pairs( Module.Replications.Public ) do\n\t\t\t\tlocal newEncodedString = HttpService:JSONEncode( publicData )\n\t\t\t\tif ( not comparisonCache[publicCategory] ) or comparisonCache[publicCategory] ~= newEncodedString then \n\t\t\t\t\t-- update the data\n\t\t\t\t\tcomparisonCache[publicCategory] = newEncodedString\n\t\t\t\t\tModule:UpdateData( publicCategory, publicData, nil )\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- private data, replicates to specific\n\t\t\tfor _, replicationInfo in ipairs( Module.Replications.Private ) do\n\t\t\t\tlocal Category, Data, PlayerTable = unpack( replicationInfo )\n\t\t\t\tlocal newEncodedString = HttpService:JSONEncode( Data )\n\t\t\t\tif ( not comparisonCache[Category] ) or comparisonCache[Category] ~= newEncodedString then \n\t\t\t\t\tcomparisonCache[Category] = newEncodedString\n\t\t\t\t\tModule:UpdateData( Category, Data, PlayerTable )\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend)\n\t\nelse\n\t\n\tlocal LocalPlayer = game:GetService('Players').LocalPlayer\n\t\n\tModule.OnUpdate = Instance.new('BindableEvent')\n\t\n\t-- client\n\tlocal DataContainer = { }\n\t\n\tfunction Module:GetData( Category, Yield )\n\t\tif DataContainer[Category] then\n\t\t\treturn DataContainer[Category]\n\t\tend\n\t\tif Yield then\n\t\t\tlocal yieldStart = tick()\n\t\t\trepeat task.wait(0.1) until DataContainer[Category] or (tick() - yieldStart) > 5\n\t\tend\n\t\treturn DataContainer[Category]\n\tend\n\t\n\tDataRemoteEvent.OnClientEvent:Connect(function( Category, Data )\n\t\tDataContainer[ Category ] = Data\n\t\tModule.OnUpdate:Fire( Category, Data )\n\tend)\n\t\n\tDataRemoteEvent:FireServer()\n\t\nend\n\nreturn Module\n",
  "SourceAssetId": "<unsupported: Int64(-1)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 3273408, time: 32318743, random: 7712671185636030641 })>"
}