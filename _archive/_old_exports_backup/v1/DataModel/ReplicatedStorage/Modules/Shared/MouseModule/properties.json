{
  "Attributes": "<unsupported: Attributes(Attributes { data: {} })>",
  "Capabilities": "<unsupported: SecurityCapabilities(SecurityCapabilities { value: 0 })>",
  "HistoryId": "<unsupported: UniqueId(UniqueId { index: 0, time: 0, random: 0 })>",
  "LinkedSource": "<unsupported: ContentId(ContentId { url: \"\" })>",
  "Sandboxed": false,
  "ScriptGuid": "{5FC66532-CF24-4E4D-B8E5-4DF810D12495}",
  "Source": "local UserInputService = game:GetService('UserInputService')\nlocal RunService = game:GetService('RunService')\nlocal Camera = workspace.Camera\n\nlocal function onRenderStep(mouse, step)\n\tif (mouse.ticks % 2 == 0) then\n\t\tmouse.currentPosition = mouse:GetPosition()\n\telse\n\t\tmouse.previousPosition = mouse:GetPosition()\n\tend\n\tmouse.ticks = mouse.ticks % 10 + 1\nend\n\nlocal Mouse = {}\nMouse.__index = Mouse\n\nfunction Mouse.new()\n\tlocal m = {}\n\tm.filterDescendants = {}\n\tm.filterType = Enum.RaycastFilterType.Blacklist\n\tm.rayLength = 500\n\tm.currentPosition = Vector2.new(0, 0)\n\tm.previousPosition = Vector2.new(0, 0)\n\tm.ticks = 1\n\t\n\tRunService:BindToRenderStep('MeasureMouseMovement', Enum.RenderPriority.Input.Value, function(step)\n\t\tonRenderStep(m, step)\n\tend)\n\n\tsetmetatable(m, Mouse)\n\treturn m\nend\n\nfunction Mouse:GetViewSize()\n\treturn Camera.ViewportSize\nend\n\nfunction Mouse:GetPosition()\n\treturn UserInputService:GetMouseLocation()\nend\n\nfunction Mouse:GetUnitRay()\n\tlocal position = self:GetPosition()\n\treturn Camera:ViewportPointToRay(position.x, position.y)\nend\n\nfunction Mouse:GetOrigin()\n\treturn self:GetUnitRay().Origin\nend\n\nfunction Mouse:GetDelta()\n\treturn (self.currentPosition - self.previousPosition)\nend\n\nfunction Mouse:ScreenPointToRay()\n\tlocal parameters = RaycastParams.new()\n\tparameters.FilterDescendantsInstances = self.filterDescendants\n\tparameters.FilterType = Enum.RaycastFilterType.Blacklist\n\treturn parameters\nend\n\nfunction Mouse:CastRay()\n\tlocal parameters = self:ScreenPointToRay()\n\treturn workspace:Raycast(self:GetOrigin(), self:GetUnitRay().Direction * self.rayLength, parameters)\nend\n\nfunction Mouse:GetHit()\n\tlocal raycastResult = self:CastRay()\n\treturn raycastResult and raycastResult.Position or nil\nend\n\nfunction Mouse:GetTarget()\n\tlocal raycastResult = self:CastRay()\n\treturn raycastResult and raycastResult.Instance or nil\nend\n\nfunction Mouse:GetTargetFilter()\n\treturn self.filterDescendants\nend\n\nfunction Mouse:SetTargetFilter(object)\n\tlocal dataType = typeof(object)\n\tif dataType == 'Instance' then\n\t\tself.filterDescendants = {object}\n\telseif dataType == 'table' then\n\t\tself.filterDescendants = object\n\telse\n\t\terror('object expected an instance or a table of instances, received: '..dataType)\n\tend\nend\n\nfunction Mouse:GetRayLength()\n\treturn self.rayLength\nend\n\nfunction Mouse:SetRayLength(length)\n\tlocal dataType = typeof(length)\n\tassert(dataType == 'number' and length >= 0, 'length expected a number, received: ' .. dataType)\n\tself.rayLength = length\nend\n\nfunction Mouse:GetFilterType()\n\treturn self.filterType\nend\n\nfunction Mouse:SetFilterType(filterType)\n\tlocal filterTypes = Enum.RaycastFilterType:GetEnumItems()\n\tif table.find(filterTypes, filterType) then\n\t\tself.filterType = filterType\n\telse\n\t\terror('Invalid raycast filter type provided')\n\tend\nend\n\nfunction Mouse:EnableIcon()\n\tUserInputService.MouseIconEnabled = true\nend\n\nfunction Mouse:DisableIcon()\n\tUserInputService.MouseIconEnabled = false\nend\n\nreturn Mouse",
  "SourceAssetId": "<unsupported: Int64(-1)>",
  "Tags": "<unsupported: Tags(Tags { members: [] })>",
  "UniqueId": "<unsupported: UniqueId(UniqueId { index: 25788, time: 142155861, random: 1232354692393223026 })>"
}