{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: ViewportHandler)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: ViewportHandler)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: ViewportHandler)>",
  "Sandboxed": false,
  "ScriptGuid": "{675A4275-0B2E-4846-BE4B-706B41E89792}",
  "Source": "local RS, HTTP = game:GetService(\"RunService\"), game:GetService(\"HttpService\")\n\n--Prefab stateless humanoid (used to wrap clothes)\nlocal StatelessHumanoid = Instance.new(\"Humanoid\")\n\tStatelessHumanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Dead,false);StatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)\n\tStatelessHumanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)\n\n--Define valids\nlocal ValidChildren\t\t= {\n\tDecal = true; Texture = true; SpecialMesh = true;\n}\nlocal ValidProperties\t= {\n\tColor = true; Material = true; Reflectance = true; Transparency = true; Size = true;\n\tBackSurface = true; BottomSurface = true; FrontSurface = true; LeftSurface = true; RightSurface = true; TopSurface = true;\n}\n\n--Don't want scripts or welds in our clone object\nlocal function ClearInvalidChildren(Object)\n\tlocal Children = Object:GetChildren()\n\t\n\tfor i=1, #Children do\n\t\tlocal c = Children[i]\n\t\t\n\t\tif not ValidChildren[c.ClassName] then\n\t\t\tc:Destroy()\n\t\tend\n\tend\n\t\n\treturn Object\nend\n\nlocal ObjectHandler = {}\nObjectHandler.__index = ObjectHandler\n\nfunction ObjectHandler.new(Handler, Object,ObjectClone,FPS)\n\t\n\tlocal objHandler = {}\n\t\n\tobjHandler.Enabled\t\t= (FPS and FPS>0) and true or false\n\tobjHandler.Handler\t\t= Handler\n\tobjHandler.Object\t\t= Object\n\tobjHandler.ObjectClone\t= ObjectClone\n\tobjHandler.WaitTime\t\t= FPS and 1/math.clamp(FPS,0,9999) or 0.033333333333333\n\tobjHandler.LastUpdate\t= 0\n\tobjHandler.ObjectID\t\t= HTTP:GenerateGUID(false)\n\tobjHandler.Showing\t\t= true\n\tobjHandler.Running\t\t= true\n\t\n\t\n\tsetmetatable(objHandler, ObjectHandler)\n\n\tHandler.AllObjects[objHandler.ObjectID] = objHandler\n\t\n\tif objHandler.Enabled then\n\t\tHandler.ObjectsRenderQueue[objHandler.ObjectID] = objHandler\n\tend\n\n\t\n\treturn objHandler\nend\n\nfunction ObjectHandler:Destroy()\n\tself.Handler.ObjectsRenderQueue[self.ObjectID] = nil\n\tself.Handler.AllObjects[self.ObjectID] = nil\n\tself.ObjectClone:Destroy()\nend\n\nfunction ObjectHandler:SetFPS(NewFPS)\n\tif NewFPS and type(NewFPS) == \"number\" then\t\t\n\t\tself.WaitTime = 1/math.clamp(NewFPS,0,9999)\n\t\t\n\t\tif NewFPS>0 then\n\t\t\tself.Enabled = true\n\t\t\tself.Handler.ObjectsRenderQueue[self.ObjectID] = self\n\t\telse\n\t\t\tself.Enabled = false\n\t\t\tself.Handler.ObjectsRenderQueue[self.ObjectID] = nil\n\t\tend\n\tend\n\t\nend\n\nfunction ObjectHandler:Pause()\n\tself.Enabled = false\n\tself.Running = false\n\t\n\tself.Handler.ObjectRenderQueue[self.ObjectID] = nil\n\nend\n\nfunction ObjectHandler:Resume()\n\tself.Enabled = self.Showing\n\tself.Running = true\n\t\n\tif self.Enabled then\n\t\tself.Handler.ObjectRenderQueue[self.ObjectID] = self\n\telse\n\t\tself.Handler.ObjectRenderQueue[self.ObjectID] = nil\n\tend\n\t\nend\n\nfunction ObjectHandler:Hide()\n\tself.Enabled = false\n\tself.ObjectClone.Transparency = 1\n\tself.Showing = false\n\t\n\n\tself.Handler.ObjectRenderQueue[self.ObjectID] = nil\n\nend\n\nfunction ObjectHandler:Show()\t\n\tself.Enabled = self.Running\n\tself.ObjectClone.Transparency = self.Object.Transparency\n\tself.Showing = true\n\t\n\tif self.Enabled then\n\t\tself.Handler.ObjectRenderQueue[self.ObjectID] = self\n\telse\n\t\tself.Handler.ObjectRenderQueue[self.ObjectID] = nil\n\tend\n\t\nend\n\nfunction ObjectHandler:Refresh()\n\tif self.Enabled then return end\n\t\n\tself.ObjectClone.CFrame = self.Object.CFrame\n\t\n\tfor prop,_ in pairs(ValidProperties) do\n\t\tself.ObjectClone[prop] = self.Object[prop]\n\tend\n\t\nend\n\n\n\nlocal ViewportHandler = {}\nViewportHandler.__index = ViewportHandler\n\nfunction ViewportHandler.new(Frame)\n\t\n\t--Sanity checks\n\tif not Frame or not (typeof(Frame) == \"Instance\" and Frame:IsA(\"ViewportFrame\")) then warn(\"Invalid ViewportFrame\") return end\n\t\n\tlocal Handler = {\n\t\tHandlerID = HTTP:GenerateGUID(false);\n\t\tFrame = Frame;\n\t\tObjectsRenderQueue = {}; --Active only\n\t\tAllObjects = {}; --Includes inactive\n\t\t\n\t\t\n\t}\n\t\n\tHandler.RenderLogicConnection = RS.Heartbeat:Connect(function(Delta)\n\t\tfor ObjectID, ObjectInfo in pairs(Handler.ObjectsRenderQueue) do\n\t\t\tlocal Object,ObjectClone,WaitTime = ObjectInfo.Object,ObjectInfo.ObjectClone,ObjectInfo.WaitTime\t\n\n\t\t\tif Object and Object.Parent then\n\t\t\t\t\n\t\t\t\tObjectInfo.LastUpdate = ObjectInfo.LastUpdate + Delta\n\t\t\t\t\t\t\t\n\t\t\t\tif Object.CFrame ~= ObjectClone.CFrame and ObjectInfo.LastUpdate >= WaitTime then\n\t\t\t\t\t--If it has moved and FPS time has passed, then update\n\t\t\t\t\tObjectInfo.LastUpdate = 0\n\t\t\t\t\tObjectClone.CFrame = Object.CFrame\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tObjectInfo:Destroy()\n\t\t\tend\n\n\t\tend\n\tend);\n\t\n\tsetmetatable(Handler, ViewportHandler)\n\t\n\treturn Handler\nend\n\nfunction ViewportHandler:Refresh()\n\tfor ObjectID, ObjectInfo in pairs(self.AllObjects) do\n\t\tObjectInfo:Refresh()\n\tend\nend\n\nfunction ViewportHandler:Pause()\n\t\n\tself.ObjectRenderQueue = {} -- We're about to make everything inactive, so just clear the queue all at once\n\t\n\tfor ObjectID, ObjectInfo in pairs(self.AllObjects) do\n\t\tObjectInfo.Enabled = false\n\t\tObjectInfo.Running = false\t\t\n\tend\nend\n\nfunction ViewportHandler:Resume()\n\tfor ObjectID, ObjectInfo in pairs(self.AllObjects) do\n\t\tObjectInfo.Enabled = ObjectInfo.Showing\n\t\tObjectInfo.Running = true\n\t\t\n\t\tif ObjectInfo.Enabled then\n\t\t\tself.ObjectRenderQueue[ObjectID] = ObjectInfo\n\t\telse\n\t\t\tself.ObjectRenderQueue[ObjectID] = nil\n\t\tend\n\t\t\n\tend\nend\n\nfunction ViewportHandler:Hide()\n\t\n\tself.ObjectRenderQueue = {} -- We're about to make everything inactive, so just clear the queue all at once\n\t\n\tfor ObjectID, ObjectInfo in pairs(self.AllObjects) do\n\t\tObjectInfo.Enabled = false\n\t\tObjectInfo.ObjectClone.Transparency = 1\n\t\tObjectInfo.Showing = false\t\t\n\tend\nend\n\nfunction ViewportHandler:Show()\n\tfor ObjectID, ObjectInfo in pairs(self.AllObjects) do\n\t\tObjectInfo.Enabled = ObjectInfo.Running\n\t\tObjectInfo.ObjectClone.Transparency = ObjectInfo.Object.Transparency\n\t\tObjectInfo.Showing = true\n\t\t\n\t\tif ObjectInfo.Enabled then\n\t\t\tself.ObjectRenderQueue[ObjectID] = ObjectInfo\n\t\telse\n\t\t\tself.ObjectRenderQueue[ObjectID] = nil\n\t\tend\n\t\t\n\tend\nend\n\nfunction ViewportHandler:RenderObject(Object, FPS, Parent)\n\t\n\t--Sanity checks\n\tif not Object or not (typeof(Object) == \"Instance\" and Object:IsA(\"BasePart\")) then warn(\"Invalid Object\") return end\n\t\n\t--Create clone for viewport\n\tlocal ObjectClone = ClearInvalidChildren(Object:Clone())\n\t\n\t--Create handler\n\tlocal objHandler = ObjectHandler.new(self, Object,ObjectClone,FPS)\n\t\n\t--Auto update visual properties\n\tObject.Changed:Connect(function(Property)\n\t\tif objHandler.Enabled and ValidProperties[Property] then\n\t\t\tObjectClone[Property] = Object[Property]\n\t\tend\n\tend)\n\t\n\t--Display\n\tObjectClone.Parent = Parent or self.Frame\n\t\n\treturn objHandler\nend\n\n\nfunction ViewportHandler:RenderHumanoid(Character, FPS, Parent)\n\t\n\t--Sanity checks\n\tif not Character or not (typeof(Character) == \"Instance\" and Character:IsA(\"Model\")) then warn(\"Invalid Humanoid\") return end\n\tif not Character:FindFirstChildOfClass(\"Humanoid\",true) then\n\t\tif not Character:WaitForChild(\"Humanoid\",1) then\n\t\t\twarn(\"Invalid Humanoid\")\n\t\t\treturn\n\t\tend\n\tend\n\t\n\tFPS = FPS or 70\n\t\n\tlocal humHandler = {\n\t\tObjHandlers = {}\n\t}\n\t\n\tlocal CharacterClone = Instance.new(\"Model\")\n\t\tCharacterClone.Name = Character.Name\n\t\t\n\tlocal Descendants\t= Character:GetDescendants()\n\tfor i=1, #Descendants do\n\t\tlocal d = Descendants[i]\n\t\t\n\t\tif d:IsA(\"BasePart\") then\n\t\t\thumHandler.ObjHandlers[d] = self:RenderObject(d,FPS,CharacterClone)\n\t\tend\n\tend\n\t\n\t\n\t-- Handle tools\n\tCharacter.DescendantAdded:Connect(function(d)\n\t\tif d:IsA(\"BasePart\") then\n\t\t\thumHandler.ObjHandlers[d] = self:RenderObject(d,FPS,CharacterClone)\n\t\tend\n\tend)\n\tCharacter.DescendantRemoving:Connect(function(d)\n\t\tif humHandler.ObjHandlers[d] then\n\t\t\thumHandler.ObjHandlers[d]:Destroy()\n\t\tend\n\tend)\n\t\n\t-- Handle clothes\n\tlocal Shirt,Pants = Character:FindFirstChildOfClass(\"Shirt\"),Character:FindFirstChildOfClass(\"Pants\")\n\t\n\tif Shirt then Shirt:Clone().Parent = CharacterClone end\n\tif Pants then Pants:Clone().Parent = CharacterClone end\n\t\n\t\n\tlocal Humanoid = StatelessHumanoid:Clone()\n\t\tHumanoid.RigType = Character:FindFirstChildOfClass(\"Humanoid\",true).RigType\n\t\tHumanoid.Parent = CharacterClone\n\t\n\tCharacterClone.Parent = Parent or self.Frame\n\t\n\t\n\tfunction humHandler:Destroy()\n\t\tfor i,o in pairs(self.ObjHandlers) do\n\t\t\to:Destroy()\n\t\tend\n\t\tCharacterClone:Destroy()\n\tend\n\t\n\treturn humHandler\nend\n\nfunction ViewportHandler:Destroy()\n\tself.RenderLogicConnection:Disconnect()\n\t\n\tfor ObjectID, ObjectInfo in pairs(self.AllObjects) do\n\t\tif ObjectInfo.ObjectClone then\n\t\t\tObjectInfo.ObjectClone:Destroy()\n\t\tend\n\tend\n\t\n\tself.AllObjects = nil\n\tself.ObjectsRenderQueue = nil\n\tself.Frame = nil\nend\n\nreturn ViewportHandler\n",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: ViewportHandler)>"
}