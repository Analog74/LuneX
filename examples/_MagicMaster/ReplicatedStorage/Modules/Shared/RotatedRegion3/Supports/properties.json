{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: Supports)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: Supports)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: Supports)>",
  "Sandboxed": false,
  "ScriptGuid": "{B3B5877D-A962-45DB-985D-8A46D443E9D9}",
  "Source": "local ZERO = Vector3.new(0, 0, 0)\nlocal RIGHT = Vector3.new(1, 0, 0)\n\n--\n\nlocal function rayPlane(p, v, s, n)\n\tlocal r = p - s;\n\tlocal t = -r:Dot(n) / v:Dot(n)\n\treturn p + t * v, t\nend;\n\n--\n\nlocal Supports = {}\n\nfunction Supports.PointCloud(set, direction)\n\tlocal max, maxDot = set[1], set[1]:Dot(direction)\n\tfor i = 2, #set do\n\t\tlocal dot = set[i]:Dot(direction)\n\t\tif (dot > maxDot) then\n\t\t\tmax = set[i]\n\t\t\tmaxDot = dot\n\t\tend\n\tend\n\treturn max\nend\n\nfunction Supports.Cylinder(set, direction)\n\tlocal cf, size2 = unpack(set)\n\tdirection = cf:VectorToObjectSpace(direction)\n\tlocal radius = math.min(size2.y, size2.z)\n\tlocal dotT, cPoint = direction:Dot(RIGHT), Vector3.new(size2.x, 0, 0)\n\tlocal h, t, final\n\t\n\tif (dotT == 0) then\n\t\tfinal = direction.Unit * radius\n\telse\n\t\tcPoint = dotT > 0 and cPoint or -cPoint\n\t\th, t = rayPlane(ZERO, direction, cPoint, RIGHT)\n\t\tfinal = cPoint + (h - cPoint).Unit * radius\n\tend\n\t\n\treturn cf:PointToWorldSpace(final)\nend\n\nfunction Supports.Ellipsoid(set, direction)\n\tlocal cf, size2 = unpack(set)\n\treturn cf:PointToWorldSpace(size2 * (size2 * cf:VectorToObjectSpace(direction)).Unit)\nend\n\nreturn Supports",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: Supports)>"
}