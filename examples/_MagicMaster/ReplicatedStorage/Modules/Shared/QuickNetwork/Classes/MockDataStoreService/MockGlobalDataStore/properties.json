{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: MockGlobalDataStore)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: MockGlobalDataStore)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: MockGlobalDataStore)>",
  "Sandboxed": false,
  "ScriptGuid": "{8E493BB2-F44E-4284-A545-980E3CAF5738}",
  "Source": "--[[\n\tMockGlobalDataStore.lua\n\tThis module implements the API and functionality of Roblox's GlobalDataStore class.\n\n\tThis module is licensed under APLv2, refer to the LICENSE file or:\n\thttps://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE\n]]\n\nlocal MockGlobalDataStore = {}\nMockGlobalDataStore.__index = MockGlobalDataStore\n\nlocal MockDataStoreManager = require(script.Parent.MockDataStoreManager)\nlocal Utils = require(script.Parent.MockDataStoreUtils)\nlocal Constants = require(script.Parent.MockDataStoreConstants)\nlocal HttpService = game:GetService(\"HttpService\") -- for json encode/decode\n\nlocal rand = Random.new()\n\nfunction MockGlobalDataStore:OnUpdate(key, callback)\n\tkey = Utils.preprocessKey(key)\n\tif type(key) ~= \"string\" then\n\t\terror((\"bad argument #1 to 'OnUpdate' (string expected, got %s)\"):format(typeof(key)), 2)\n\telseif type(callback) ~= \"function\" then\n\t\terror((\"bad argument #2 to 'OnUpdate' (function expected, got %s)\"):format(typeof(callback)), 2)\n\telseif #key == 0 then\n\t\terror(\"bad argument #1 to 'OnUpdate' (key name can't be empty)\", 2)\n\telseif #key > Constants.MAX_LENGTH_KEY then\n\t\terror((\"bad argument #1 to 'OnUpdate' (key name exceeds %d character limit)\"):format(Constants.MAX_LENGTH_KEY), 2)\n\tend\n\n\tUtils.simulateErrorCheck(\"OnUpdate\")\n\n\tlocal success = MockDataStoreManager.YieldForBudget(\n\t\tfunction()\n\t\t\twarn((\"OnUpdate request was throttled due to lack of budget. Try sending fewer requests. Key = %s\"):format(key))\n\t\tend,\n\t\t{Enum.DataStoreRequestType.OnUpdate}\n\t)\n\n\tif not success then\n\t\terror(\"OnUpdate rejected with error (request was throttled, but throttled queue was full)\", 2)\n\tend\n\n\tUtils.logMethod(self, \"OnUpdate\", key)\n\n\treturn self.__event.Event:Connect(function(k, v)\n\t\tif k == key then\n\t\t\tif Constants.YIELD_TIME_UPDATE_MAX > 0 then\n\t\t\t\tUtils.accurateWait(rand:NextNumber(Constants.YIELD_TIME_UPDATE_MIN, Constants.YIELD_TIME_UPDATE_MAX))\n\t\t\tend\n\t\t\tcallback(v) -- v was implicitly deep-copied\n\t\tend\n\tend)\nend\n\nfunction MockGlobalDataStore:GetAsync(key)\n\tkey = Utils.preprocessKey(key)\n\tif type(key) ~= \"string\" then\n\t\terror((\"bad argument #1 to 'GetAsync' (string expected, got %s)\"):format(typeof(key)), 2)\n\telseif #key == 0 then\n\t\terror(\"bad argument #1 to 'GetAsync' (key name can't be empty)\", 2)\n\telseif #key > Constants.MAX_LENGTH_KEY then\n\t\terror((\"bad argument #1 to 'GetAsync' (key name exceeds %d character limit)\"):format(Constants.MAX_LENGTH_KEY), 2)\n\tend\n\n\tif self.__getCache[key] and tick() - self.__getCache[key] < Constants.GET_COOLDOWN then\n\t\treturn Utils.deepcopy(self.__data[key])\n\tend\n\n\tUtils.simulateErrorCheck(\"GetAsync\")\n\n\tlocal success = MockDataStoreManager.YieldForBudget(\n\t\tfunction()\n\t\t\twarn((\"GetAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s\"):format(key))\n\t\tend,\n\t\t{Enum.DataStoreRequestType.GetAsync}\n\t)\n\n\tif not success then\n\t\terror(\"GetAsync rejected with error (request was throttled, but throttled queue was full)\", 2)\n\tend\n\n\tself.__getCache[key] = tick()\n\n\tlocal retValue = Utils.deepcopy(self.__data[key])\n\n\tUtils.simulateYield()\n\n\tUtils.logMethod(self, \"GetAsync\", key)\n\n\treturn retValue\nend\n\nfunction MockGlobalDataStore:IncrementAsync(key, delta)\n\tkey = Utils.preprocessKey(key)\n\tif type(key) ~= \"string\" then\n\t\terror((\"bad argument #1 to 'IncrementAsync' (string expected, got %s)\"):format(typeof(key)), 2)\n\telseif delta ~= nil and type(delta) ~= \"number\" then\n\t\terror((\"bad argument #2 to 'IncrementAsync' (number expected, got %s)\"):format(typeof(delta)), 2)\n\telseif #key == 0 then\n\t\terror(\"bad argument #1 to 'IncrementAsync' (key name can't be empty)\", 2)\n\telseif #key > Constants.MAX_LENGTH_KEY then\n\t\terror((\"bad argument #1 to 'IncrementAsync' (key name exceeds %d character limit)\")\n\t\t\t:format(Constants.MAX_LENGTH_KEY), 2)\n\tend\n\n\tUtils.simulateErrorCheck(\"IncrementAsync\")\n\n\tlocal success\n\n\tif self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then\n\t\tsuccess = MockDataStoreManager.YieldForWriteLockAndBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"IncrementAsync request was throttled, a key can only be written to once every %d seconds. Key = %s\")\n\t\t\t\t\t:format(Constants.WRITE_COOLDOWN, key))\n\t\t\tend,\n\t\t\tkey,\n\t\t\tself.__writeLock,\n\t\t\tself.__writeCache,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\telse\n\t\tself.__writeLock[key] = true\n\t\tsuccess = MockDataStoreManager.YieldForBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"IncrementAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s\")\n\t\t\t\t\t:format(key))\n\t\t\tend,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\t\tself.__writeLock[key] = nil\n\tend\n\n\tif not success then\n\t\terror(\"IncrementAsync rejected with error (request was throttled, but throttled queue was full)\", 2)\n\tend\n\n\tlocal old = self.__data[key]\n\n\tif old ~= nil and (type(old) ~= \"number\" or old % 1 ~= 0) then\n\t\tUtils.simulateYield()\n\t\terror(\"IncrementAsync rejected with error (cannot increment non-integer value)\", 2)\n\tend\n\n\tself.__writeLock[key] = true\n\n\tdelta = delta and math.floor(delta + .5) or 1\n\n\tself.__data[key] = (old or 0) + delta\n\n\tif old == nil or delta ~= 0 then\n\t\tself.__event:Fire(key, self.__data[key])\n\tend\n\n\tlocal retValue = self.__data[key]\n\n\tUtils.simulateYield()\n\n\tself.__writeLock[key] = nil\n\tself.__writeCache[key] = tick()\n\n\tself.__getCache[key] = tick()\n\n\tUtils.logMethod(self, \"IncrementAsync\", key, retValue, delta)\n\n\treturn retValue\nend\n\nfunction MockGlobalDataStore:RemoveAsync(key)\n\tkey = Utils.preprocessKey(key)\n\tif type(key) ~= \"string\" then\n\t\terror((\"bad argument #1 to 'RemoveAsync' (string expected, got %s)\"):format(typeof(key)), 2)\n\telseif #key == 0 then\n\t\terror(\"bad argument #1 to 'RemoveAsync' (key name can't be empty)\", 2)\n\telseif #key > Constants.MAX_LENGTH_KEY then\n\t\terror((\"bad argument #1 to 'RemoveAsync' (key name exceeds %d character limit)\"):format(Constants.MAX_LENGTH_KEY), 2)\n\tend\n\n\tUtils.simulateErrorCheck(\"RemoveAsync\")\n\n\tlocal success\n\n\tif self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then\n\t\tsuccess = MockDataStoreManager.YieldForWriteLockAndBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"RemoveAsync request was throttled, a key can only be written to once every %d seconds. Key = %s\")\n\t\t\t\t\t:format(Constants.WRITE_COOLDOWN, key))\n\t\t\tend,\n\t\t\tkey,\n\t\t\tself.__writeLock,\n\t\t\tself.__writeCache,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\telse\n\t\tself.__writeLock[key] = true\n\t\tsuccess = MockDataStoreManager.YieldForBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"RemoveAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s\")\n\t\t\t\t\t:format(key))\n\t\t\tend,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\t\tself.__writeLock[key] = nil\n\tend\n\n\tif not success then\n\t\terror(\"RemoveAsync rejected with error (request was throttled, but throttled queue was full)\", 2)\n\tend\n\n\tself.__writeLock[key] = true\n\n\tlocal value = Utils.deepcopy(self.__data[key])\n\tself.__data[key] = nil\n\n\tif value ~= nil then\n\t\tself.__event:Fire(key, nil)\n\tend\n\n\tUtils.simulateYield()\n\n\tself.__writeLock[key] = nil\n\tself.__writeCache[key] = tick()\n\n\tUtils.logMethod(self, \"RemoveAsync\", key, value)\n\n\treturn value\nend\n\nfunction MockGlobalDataStore:SetAsync(key, value)\n\tkey = Utils.preprocessKey(key)\n\tif type(key) ~= \"string\" then\n\t\terror((\"bad argument #1 to 'SetAsync' (string expected, got %s)\"):format(typeof(key)), 2)\n\telseif #key == 0 then\n\t\terror(\"bad argument #1 to 'SetAsync' (key name can't be empty)\", 2)\n\telseif #key > Constants.MAX_LENGTH_KEY then\n\t\terror((\"bad argument #1 to 'SetAsync' (key name exceeds %d character limit)\"):format(Constants.MAX_LENGTH_KEY), 2)\n\telseif value == nil or type(value) == \"function\" or type(value) == \"userdata\" or type(value) == \"thread\" then\n\t\terror((\"bad argument #2 to 'SetAsync' (cannot store value '%s' of type %s)\")\n\t\t\t:format(tostring(value), typeof(value)), 2)\n\tend\n\n\tif type(value) == \"table\" then\n\t\tlocal isValid, keyPath, reason = Utils.scanValidity(value)\n\t\tif not isValid then\n\t\t\terror((\"bad argument #2 to 'SetAsync' (table has invalid entry at <%s>: %s)\")\n\t\t\t\t:format(Utils.getStringPath(keyPath), reason), 2)\n\t\tend\n\t\tlocal pass, content = pcall(function() return HttpService:JSONEncode(value) end)\n\t\tif not pass then\n\t\t\terror(\"bad argument #2 to 'SetAsync' (table could not be encoded to json)\", 2)\n\t\telseif #content > Constants.MAX_LENGTH_DATA then\n\t\t\terror((\"bad argument #2 to 'SetAsync' (encoded data length exceeds %d character limit)\")\n\t\t\t\t:format(Constants.MAX_LENGTH_DATA), 2)\n\t\tend\n\telseif type(value) == \"string\" then\n\t\tif #value > Constants.MAX_LENGTH_DATA then\n\t\t\terror((\"bad argument #2 to 'SetAsync' (data length exceeds %d character limit)\")\n\t\t\t\t:format(Constants.MAX_LENGTH_DATA), 2)\n\t\telseif not utf8.len(value) then\n\t\t\terror(\"bad argument #2 to 'SetAsync' (string value is not valid UTF-8)\", 2)\n\t\tend\n\tend\n\n\tUtils.simulateErrorCheck(\"SetAsync\")\n\n\tlocal success\n\n\tif self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then\n\t\tsuccess = MockDataStoreManager.YieldForWriteLockAndBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"SetAsync request was throttled, a key can only be written to once every %d seconds. Key = %s\")\n\t\t\t\t\t:format(Constants.WRITE_COOLDOWN, key))\n\t\t\tend,\n\t\t\tkey,\n\t\t\tself.__writeLock,\n\t\t\tself.__writeCache,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\telse\n\t\tself.__writeLock[key] = true\n\t\tsuccess = MockDataStoreManager.YieldForBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"SetAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s\")\n\t\t\t\t\t:format(key))\n\t\t\tend,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\t\tself.__writeLock[key] = nil\n\tend\n\n\tif not success then\n\t\terror(\"SetAsync rejected with error (request was throttled, but throttled queue was full)\", 2)\n\tend\n\n\tself.__writeLock[key] = true\n\n\tif type(value) == \"table\" or value ~= self.__data[key] then\n\t\tself.__data[key] = Utils.deepcopy(value)\n\t\tself.__event:Fire(key, self.__data[key])\n\tend\n\n\tUtils.simulateYield()\n\n\tself.__writeLock[key] = nil\n\tself.__writeCache[key] = tick()\n\n\tUtils.logMethod(self, \"SetAsync\", key, self.__data[key])\n\nend\n\nfunction MockGlobalDataStore:UpdateAsync(key, transformFunction)\n\tkey = Utils.preprocessKey(key)\n\tif type(key) ~= \"string\" then\n\t\terror((\"bad argument #1 to 'UpdateAsync' (string expected, got %s)\"):format(typeof(key)), 2)\n\telseif type(transformFunction) ~= \"function\" then\n\t\terror((\"bad argument #2 to 'UpdateAsync' (function expected, got %s)\"):format(typeof(transformFunction)), 2)\n\telseif #key == 0 then\n\t\terror(\"bad argument #1 to 'UpdateAsync' (key name can't be empty)\", 2)\n\telseif #key > Constants.MAX_LENGTH_KEY then\n\t\terror((\"bad argument #1 to 'UpdateAsync' (key name exceeds %d character limit)\"):format(Constants.MAX_LENGTH_KEY), 2)\n\tend\n\n\tUtils.simulateErrorCheck(\"UpdateAsync\")\n\n\tlocal success\n\n\tif self.__writeLock[key] or tick() - (self.__writeCache[key] or 0) < Constants.WRITE_COOLDOWN then\n\t\tsuccess = MockDataStoreManager.YieldForWriteLockAndBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"UpdateAsync request was throttled, a key can only be written to once every %d seconds. Key = %s\")\n\t\t\t\t\t:format(Constants.WRITE_COOLDOWN, key))\n\t\t\tend,\n\t\t\tkey,\n\t\t\tself.__writeLock,\n\t\t\tself.__writeCache,\n\t\t\t{Enum.DataStoreRequestType.SetIncrementAsync}\n\t\t)\n\telse\n\t\tself.__writeLock[key] = true\n\t\tlocal budget\n\t\tif self.__getCache[key] and tick() - self.__getCache[key] < Constants.GET_COOLDOWN then\n\t\t\tbudget = {Enum.DataStoreRequestType.SetIncrementAsync}\n\t\telse\n\t\t\tbudget = {Enum.DataStoreRequestType.GetAsync, Enum.DataStoreRequestType.SetIncrementAsync}\n\t\tend\n\t\tsuccess = MockDataStoreManager.YieldForBudget(\n\t\t\tfunction()\n\t\t\t\twarn((\"UpdateAsync request was throttled due to lack of budget. Try sending fewer requests. Key = %s\")\n\t\t\t\t\t:format(key))\n\t\t\tend,\n\t\t\tbudget\n\t\t)\n\t\tself.__writeLock[key] = nil\n\tend\n\n\tif not success then\n\t\terror(\"UpdateAsync rejected with error (request was throttled, but throttled queue was full)\", 2)\n\tend\n\n\tlocal value = transformFunction(Utils.deepcopy(self.__data[key]))\n\n\tif value == nil then -- cancel update after remote call\n\t\tUtils.simulateYield()\n\t\treturn nil -- this is what datastores do even though it should be old value\n\tend\n\n\tif type(value) == \"function\" or type(value) == \"userdata\" or type(value) == \"thread\" then\n\t\terror((\"UpdateAsync rejected with error (resulting value '%s' is of type %s that cannot be stored)\")\n\t\t\t:format(tostring(value), typeof(value)), 2)\n\tend\n\n\tif type(value) == \"table\" then\n\t\tlocal isValid, keyPath, reason = Utils.scanValidity(value)\n\t\tif not isValid then\n\t\t\terror((\"UpdateAsync rejected with error (resulting table has invalid entry at <%s>: %s)\")\n\t\t\t\t:format(Utils.getStringPath(keyPath), reason), 2)\n\t\tend\n\t\tlocal pass, content = pcall(function() return HttpService:JSONEncode(value) end)\n\t\tif not pass then\n\t\t\terror(\"UpdateAsync rejected with error (resulting table could not be encoded to json)\", 2)\n\t\telseif #content > Constants.MAX_LENGTH_DATA then\n\t\t\terror((\"UpdateAsync rejected with error (resulting encoded data length exceeds %d character limit)\")\n\t\t\t\t:format(Constants.MAX_LENGTH_DATA), 2)\n\t\tend\n\telseif type(value) == \"string\" then\n\t\tif #value > Constants.MAX_LENGTH_DATA then\n\t\t\terror((\"UpdateAsync rejected with error (resulting data length exceeds %d character limit)\")\n\t\t\t\t:format(Constants.MAX_LENGTH_DATA), 2)\n\t\telseif not utf8.len(value) then\n\t\t\terror(\"UpdateAsync rejected with error (string value is not valid UTF-8)\", 2)\n\t\tend\n\tend\n\n\tself.__writeLock[key] = true\n\n\tif type(value) == \"table\" or value ~= self.__data[key] then\n\t\tself.__data[key] = Utils.deepcopy(value)\n\t\tself.__event:Fire(key, self.__data[key])\n\tend\n\n\tlocal retValue = Utils.deepcopy(value)\n\n\tself.__writeLock[key] = nil\n\tself.__writeCache[key] = tick()\n\n\tself.__getCache[key] = tick()\n\n\tUtils.logMethod(self, \"UpdateAsync\", key, retValue)\n\n\treturn retValue\nend\n\nfunction MockGlobalDataStore:ExportToJSON()\n\treturn HttpService:JSONEncode(self.__data)\nend\n\nfunction MockGlobalDataStore:ImportFromJSON(json, verbose)\n\tlocal content\n\tif type(json) == \"string\" then\n\t\tlocal parsed, value = pcall(function() return HttpService:JSONDecode(json) end)\n\t\tif not parsed then\n\t\t\terror(\"bad argument #1 to 'ImportFromJSON' (string is not valid json)\", 2)\n\t\tend\n\t\tcontent = value\n\telseif type(json) == \"table\" then\n\t\tcontent = Utils.deepcopy(json)\n\telse\n\t\terror((\"bad argument #1 to 'ImportFromJSON' (string or table expected, got %s)\"):format(typeof(json)), 2)\n\tend\n\n\tif verbose ~= nil and type(verbose) ~= \"boolean\" then\n\t\terror((\"bad argument #2 to 'ImportFromJSON' (boolean expected, got %s)\"):format(typeof(verbose)), 2)\n\tend\n\n\tUtils.importPairsFromTable(\n\t\tcontent,\n\t\tself.__data,\n\t\tMockDataStoreManager.GetDataInterface(self.__data),\n\t\t(verbose == false and function() end or warn),\n\t\t\"ImportFromJSON\",\n\t\t((type(self.__name) == \"string\" and type(self.__scope) == \"string\")\n\t\t\tand (\"DataStore > %s > %s\"):format(self.__name, self.__scope)\n\t\t\tor \"GlobalDataStore\"),\n\t\tfalse\n\t)\nend\n\nreturn MockGlobalDataStore\n",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: MockGlobalDataStore)>"
}