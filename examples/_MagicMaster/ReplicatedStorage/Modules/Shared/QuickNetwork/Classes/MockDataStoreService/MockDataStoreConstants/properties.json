{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: MockDataStoreConstants)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: MockDataStoreConstants)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: MockDataStoreConstants)>",
  "Sandboxed": false,
  "ScriptGuid": "{47595F21-87F0-4948-8502-E0E8C39CBAAE}",
  "Source": "--[[\n    MockDataStoreConstants.lua\n    Contains all constants used by the entirety of MockDataStoreService and its sub-classes.\n\n    This module is licensed under APLv2, refer to the LICENSE file or:\n    https://github.com/buildthomas/MockDataStoreService/blob/master/LICENSE\n]]\n\nreturn {\n\n    LOGGING_ENABLED = false;        -- Verbose logging of transactions to output\n    LOGGING_FUNCTION = warn;        -- Function for logging messages\n\n    MAX_LENGTH_KEY = 49;            -- Max number of chars in key string\n    MAX_LENGTH_NAME = 50;           -- Max number of chars in name string\n    MAX_LENGTH_SCOPE = 50;          -- Max number of chars in scope string\n    MAX_LENGTH_DATA = 4194301;      -- Max number of chars in (encoded) data strings\n\n    MAX_PAGE_SIZE = 100;            -- Max page size for GetSortedAsync\n\n    YIELD_TIME_MIN = 0.2;           -- Random yield time values for set/get/update/remove/getsorted\n    YIELD_TIME_MAX = 0.5;\n\n    YIELD_TIME_UPDATE_MIN = 0.2;    -- Random yield times from events from OnUpdate\n    YIELD_TIME_UPDATE_MAX = 0.5;\n\n    WRITE_COOLDOWN = 6.0;           -- Amount of cooldown time between writes on the same key in a particular datastore\n\n    GET_COOLDOWN = 5.0;             -- Amount of cooldown time that a recent interaction with a key is considered fresh\n\n    THROTTLE_QUEUE_SIZE = 30;       -- Amount of requests that can be throttled at once (additional requests will error)\n\n    SIMULATE_ERROR_RATE = 0;        -- Rate at which requests will throw errors for testing (0 = never, 1 = always)\n\n    BUDGETING_ENABLED = true;       -- Whether budgets are enforced and calculated\n\n    BUDGET_GETASYNC = {             -- Budget constant storing structure\n        START = 100;                    -- Starting budget\n        RATE = 60;                      -- Added budget per minute\n        RATE_PLR = 10;                  -- Additional added budget per minute per player\n        MAX_FACTOR = 3;                 -- The maximum budget as a factor of (rate + rate_plr * #players)\n    };\n\n    BUDGET_GETSORTEDASYNC = {\n        START = 10;\n        RATE = 5;\n        RATE_PLR = 2;\n        MAX_FACTOR = 3;\n    };\n\n    BUDGET_ONUPDATE = {\n        START = 30;\n        RATE = 30;\n        RATE_PLR = 5;\n        MAX_FACTOR = 1;\n    };\n\n    BUDGET_SETINCREMENTASYNC = {\n        START = 100;\n        RATE = 60;\n        RATE_PLR = 10;\n        MAX_FACTOR = 3;\n    };\n\n    BUDGET_SETINCREMENTSORTEDASYNC = {\n        START = 50;\n        RATE = 30;\n        RATE_PLR = 5;\n        MAX_FACTOR = 3;\n    };\n\n    BUDGET_BASE = 60;               -- Modifiers used for budget increases on OnClose\n    BUDGET_ONCLOSE_BASE = 150;\n\n    BUDGET_UPDATE_INTERVAL = 1.0;   -- Time interval in seconds at which budgets are updated (do not put too low)\n\n}\n",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: MockDataStoreConstants)>"
}