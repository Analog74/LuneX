{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: Utility)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: Utility)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: Utility)>",
  "Sandboxed": false,
  "ScriptGuid": "{929B1598-2D9A-4CB0-8FD5-6D37D303C8DD}",
  "Source": "local Utility = {}\n\nlocal RunService = game:GetService(\"RunService\")\n\nlocal ancestor = script:FindFirstAncestor(\"QuickNetwork\")\n\nlocal Settings = require(ancestor.Settings)\nlocal Constants = require(ancestor.Constants)\n\nlocal MAX_TRIES = Constants.MAX_TRIES\nlocal WRITE_COOLDOWN_INTERVAL = Constants.WRITE_COOLDOWN_INTERVAL\n\nlocal function DeepCopyTable(tabl)\n\tlocal copiedTable = {}\n\n\tfor key, value in pairs(tabl) do\n\t\tcopiedTable[key] = typeof(value) == \"table\" and DeepCopyTable(value) or value\n\tend\n\n\treturn copiedTable\nend\n\nlocal function HeartbeatWait(yield)\n\tyield = yield or RunService.Heartbeat:Wait()\n\tlocal dtPassed = 0\n\n\twhile true do\n\t\tif dtPassed >= yield then\n\t\t\treturn dtPassed\n\t\tend\n\t\t\n\t\tdtPassed += RunService.Heartbeat:Wait()\n\tend\t\nend\n\nlocal function Session_Locked(data)\n\treturn data.MetaData and os.time() - data.MetaData.SessionJobTime < Settings.AssumeDeadSessionLock\nend\n\nlocal function SerializeData(data)\n\tfor key, value in pairs(data) do\n\t\tif typeof(value) == \"table\" and value.Signal then\n\t\t\tdata[key] = nil\n\t\t\t\n\t\telseif typeof(value) == \"table\" then\n\t\t\tSerializeData(value)\n\t\t\t\n\t\telseif typeof(value) == \"Instance\" then\n\t\t\tdata[key] = nil\n\t\tend\n\tend\nend\n\nfunction Utility.Wipe(dataNetwork, data, wipeBackup)\n\tlocal dataStore = wipeBackup and dataNetwork.BackupDataStore or dataNetwork.DataStore\n\tlocal tries = 0\n\t\n\twhile tries < MAX_TRIES do\n\t\tlocal success, response = pcall(dataStore.RemoveAsync, dataStore, data.MetaData.Key)\n\n\t\tif success then\n\t\t\treturn \"WIPED\"\n\t\telse\n\t\t\ttries += 1\n\n\t\t\tif tries == MAX_TRIES then\n\t\t\t\treturn response\n\t\t\tend\n\t\t\t\n\t\t\tHeartbeatWait(WRITE_COOLDOWN_INTERVAL)\n\t\tend\n\tend\nend\t\n\nfunction Utility.Save(dataNetwork, data, saveBackup)\n\tlocal dataStore = saveBackup and dataNetwork.BackupDataStore or dataNetwork.DataStore\n\tlocal tries = 0\n\n\twhile tries < MAX_TRIES do\n\t\tlocal success, response = pcall(dataStore.UpdateAsync, dataStore, data.MetaData.Key, function()\n\t\t\tlocal copiedData = DeepCopyTable(data)\n\n\t\t\t-- Remove any unsaveable keys to prevent errors:\n\t\t\tSerializeData(copiedData)\n\t\t\t\n\t\t\tif copiedData.MetaData.BoundToClear then\n\t\t\t\tcopiedData.MetaData = nil\n\t\t\telse\n\t\t\t\tcopiedData.MetaData.DataNetwork = nil\n\t\t\tend\n\n\t\t\treturn copiedData\n\t\tend)\n\n\t\tif success then\n\t\t\treturn \"SAVED\"\n\t\telse\n\t\t\tif not data.MetaData.BoundToClear then\n\t\t\t\ttries += 1\n\t\t\tend\n\n\t\t\tif tries == MAX_TRIES then\n\t\t\t\treturn response\n\t\t\tend\n\n\t\t\tHeartbeatWait(WRITE_COOLDOWN_INTERVAL)\n\t\tend\n\tend\nend\n\nfunction Utility.Load(dataNetwork, key, loadMethod, loadBackup, readOnly)\n\tlocal dataStore = loadBackup and dataNetwork.BackupDataStore or dataNetwork.DataStore\n\tlocal tries = 0\n\n\twhile tries < MAX_TRIES do\n\t\tlocal readOnlyResponse\n\t\tlocal sessionLocked = false\n\n\t\tlocal success, response = pcall(dataStore.UpdateAsync, dataStore, key, function(data)\n\t\t\tif readOnly then\n\t\t\t\treadOnlyResponse = data\n\t\t\t\treturn\n\t\t\telse\n\t\t\t\tif data == nil then\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\tend \n\t\t\t\n\t\t\tif data.MetaData == nil then\n\t\t\t\tif data._internal then\n\t\t\t\t\tif data._internal.sessionJobTime then\n\t\t\t\t\t\tdata.MetaData = {\n\t\t\t\t\t\t\tSessionJobTime = data._internal.sessionJobTime\n\t\t\t\t\t\t}\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tdata._internal = nil\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif Session_Locked(data) then \n\t\t\t\tsessionLocked = true\n\t\t\t\t\n\t\t\t\tif loadMethod == \"steal\" then\n\t\t\t\t\tdata.MetaData = {             \n\t\t\t\t\t\tSessionLockFree = false,\n\t\t\t\t\t\tSessionJobTime = data.MetaData.SessionJobTime\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treadOnlyResponse = data\n\t\t\t\t\treturn\n\t\t\t\telse\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\telse  \n\t\t\t\tdata.MetaData = {\n\t\t\t\t\tSessionJobTime = os.time(),\n\t\t\t\t\tSessionLockFree = true\n\t\t\t\t}\n\t\t\tend\t\n\n\t\t\treturn data\n\t\tend)\n\n\t\tif success then\t\t\n\t\t\treturn readOnlyResponse or response, sessionLocked\n\t\telse\n\t\t\ttries += 1\n\n\t\t\tif response:find(\"504\") or response:find(\"501\") then\n\t\t\t\treturn \"CORRUPTED\"\n\n\t\t\telseif tries == MAX_TRIES then\n\t\t\t\treturn response\n\t\t\tend\n\n\t\t\tHeartbeatWait(WRITE_COOLDOWN_INTERVAL)\n\t\tend\n\tend\nend\n\nreturn Utility\n",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: Utility)>"
}