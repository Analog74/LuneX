{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: Queue)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: Queue)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: Queue)>",
  "Sandboxed": false,
  "ScriptGuid": "{7673C93D-85AE-4737-9C52-077A6E8ABEBE}",
  "Source": "local Queue = {}\n\nlocal RunService = game:GetService(\"RunService\")\n\nlocal ancestor = script:FindFirstAncestor(\"QuickNetwork\") \n\nlocal Settings = require(ancestor.Settings)\nlocal Signal = require(ancestor.Classes.Signal)\nlocal Constants = require(ancestor.Constants)\n\nlocal WRITE_COOLDOWN_INTERVAL = Constants.WRITE_COOLDOWN_INTERVAL\n\nlocal function HeartBeatWait(yield)\n\tyield = yield or RunService.Heartbeat:Wait()\n\tlocal dtPassed = 0\n\n\twhile true do\n\t\tif dtPassed >= yield then\n\t\t\treturn dtPassed\n\t\tend\n\n\t\tdtPassed += RunService.Heartbeat:Wait()\n\tend\t\nend\n\nlocal function RemoveCallback(queue)\n\ttable.remove(queue.QueuedCallBacks, 1)\n\tqueue.CallBackRemoved:Fire()\nend \n\nfunction Queue.QueueAPICall(args, callBack)\n\tlocal readOnly = args[5]\n\n\tif not Settings.ThrottlingProtection or readOnly then\n\t\treturn callBack(table.unpack(args))\n\tend\n\n\tlocal dataNetwork = args[1]\n\tlocal backup = #args == 3 and args[3] or #args > 3 and args[4]\n\tlocal dataStoreName = backup and dataNetwork.BackupDataStore.Name or dataNetwork.DataStore.Name\n\tlocal key = #args > 3 and args[2] or #args == 3 and args[2].MetaData.Key\n\t\n\tQueue[dataStoreName] = Queue[dataStoreName] or {}\n\n\tlocal callBackFunc = function(...)\n\t\treturn callBack(...)\n\tend\n\n\tQueue[dataStoreName][key] = Queue[dataStoreName][key] or {\n\t\t--[[\n\n\t\t\tLastWrite = os.time(),\n\t\t\tCallbacks = {},\n\t\t\tCallbackRemoved = Signal.new(),\n\n\t\t]]\n\n\t\tLastWrite = 0,\n\t\tQueuedCallBacks = {},\n\t\tCallBackRemoved = Signal.new(),\n\t}\n\n\tlocal queue = Queue[dataStoreName][key]\n\tqueue.CallBackRemoved = Signal.new() \n\tlocal CallbackQueueFinished\n\n\tif os.time() - queue.LastWrite >= WRITE_COOLDOWN_INTERVAL and #queue.QueuedCallBacks == 0 then\n\t\ttable.insert(queue.QueuedCallBacks, callBackFunc)\n\t\t\n\t\tlocal args = {callBackFunc(table.unpack(args))}\n\t\tqueue.LastWrite = os.time()\n\t\tRemoveCallback(queue)  -- Remove callback from queue\n\t\t\n\t\treturn table.unpack(args)\n\telse\n\t\ttable.insert(queue.QueuedCallBacks, callBackFunc)\n\n\t\tif queue.QueuedCallBacks[1] ~= callBackFunc then\n\t\t\tCallbackQueueFinished = Signal.new()\n\n\t\t\tqueue.CallBackRemoved:Connect(function()\n\t\t\t\tif queue.QueuedCallBacks[1] == callBackFunc then\n\t\t\t\t\tCallbackQueueFinished:Fire()\n\t\t\t\tend\n\t\t\tend)\n\n\t\t\tCallbackQueueFinished:Wait()\n\t\t\tCallbackQueueFinished:Disconnect()\n\t\tend\n\n\t\t-- Make sure write cooldown has passed to prevent throttling:\n\t\twhile os.time() - queue.LastWrite < WRITE_COOLDOWN_INTERVAL do\n\t\t\tHeartBeatWait(1)\n\t\tend\n\n\t\tlocal args = {callBackFunc(table.unpack(args))}\n\t\tqueue.LastWrite = os.time()\n\t\tRemoveCallback(queue) -- Remove callback from queue\n\t\t\n\t\tif #queue.QueuedCallBacks == 0 then\n\t\t\tqueue.CallBackRemoved:Disconnect()\n\t\tend\n\t\t\n\t\treturn table.unpack(args)\n\tend\nend\n\nreturn Queue",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: Queue)>"
}