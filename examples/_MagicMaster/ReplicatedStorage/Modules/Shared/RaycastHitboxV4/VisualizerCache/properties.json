{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: VisualizerCache)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: VisualizerCache)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: VisualizerCache)>",
  "Sandboxed": false,
  "ScriptGuid": "{661F7DF7-585D-4EEC-B739-E77BBA7B26D4}",
  "Source": "--!strict\r\n--- Cache LineHandleAdornments or create new ones if not in the cache\r\n-- @author Swordphin123\r\n\r\n-- Debug / Test ray visual options\r\nlocal DEFAULT_DEBUGGER_RAY_COLOUR: Color3 = Color3.fromRGB(255, 0, 0)\r\nlocal DEFAULT_DEBUGGER_RAY_WIDTH: number = 4\r\nlocal DEFAULT_DEBUGGER_RAY_NAME: string = \"_RaycastHitboxDebugLine\"\r\nlocal DEFAULT_FAR_AWAY_CFRAME: CFrame = CFrame.new(0, math.huge, 0)\r\n\r\nlocal cache = {}\r\ncache.__index = cache\r\ncache.__type = \"RaycastHitboxVisualizerCache\"\r\ncache._AdornmentInUse = {}\r\ncache._AdornmentInReserve = {}\r\n\r\n--- AdornmentData type\r\nexport type AdornmentData = {\r\n\tAdornment: LineHandleAdornment,\r\n\tLastUse: number\r\n}\r\n\r\n--- Internal function to create an AdornmentData type\r\n--- Creates a LineHandleAdornment and a timer value\r\nfunction cache:_CreateAdornment(): AdornmentData\r\n\tlocal line: LineHandleAdornment = Instance.new(\"LineHandleAdornment\")\r\n\tline.Name = DEFAULT_DEBUGGER_RAY_NAME\r\n\tline.Color3 = DEFAULT_DEBUGGER_RAY_COLOUR\r\n\tline.Thickness = DEFAULT_DEBUGGER_RAY_WIDTH\r\n\r\n\tline.Length = 0\r\n\tline.CFrame = DEFAULT_FAR_AWAY_CFRAME\r\n\r\n\tline.Adornee = workspace.Terrain\r\n\tline.Parent = workspace.Terrain\r\n\r\n\treturn {\r\n\t\tAdornment = line,\r\n\t\tLastUse = 0\r\n\t}\r\nend\r\n\r\n--- Gets an AdornmentData type. Creates one if there isn't one currently available.\r\nfunction cache:GetAdornment(): AdornmentData?\r\n\tif #cache._AdornmentInReserve <= 0 then\r\n\t\t--- Create a new LineAdornmentHandle if none are in reserve\r\n\t\tlocal adornment: AdornmentData = cache:_CreateAdornment()\r\n\t\ttable.insert(cache._AdornmentInReserve, adornment)\r\n\tend\r\n\r\n\tlocal adornment: AdornmentData? = table.remove(cache._AdornmentInReserve, 1)\r\n\r\n\tif adornment then\r\n\t\tadornment.Adornment.Visible = true\r\n\t\tadornment.LastUse = os.clock()\r\n\t\ttable.insert(cache._AdornmentInUse, adornment)\r\n\tend\r\n\r\n\treturn adornment\r\nend\r\n\r\n--- Returns an AdornmentData back into the cache.\r\n-- @param AdornmentData\r\nfunction cache:ReturnAdornment(adornment: AdornmentData)\r\n\tadornment.Adornment.Length = 0\r\n\tadornment.Adornment.Visible = false\r\n\tadornment.Adornment.CFrame = DEFAULT_FAR_AWAY_CFRAME\r\n\ttable.insert(cache._AdornmentInReserve, adornment)\r\nend\r\n\r\n--- Clears the cache in reserve. Should only be used if you want to free up some memory.\r\n--- If you end up turning on the visualizer again for this session, the cache will fill up again.\r\n--- Does not clear adornments that are currently in use.\r\nfunction cache:Clear()\r\n\tfor i = #cache._AdornmentInReserve, 1, -1 do\r\n\t\tif cache._AdornmentInReserve[i].Adornment then\r\n\t\t\tcache._AdornmentInReserve[i].Adornment:Destroy()\r\n\t\tend\r\n\r\n\t\ttable.remove(cache._AdornmentInReserve, i)\r\n\tend\r\nend\r\n\r\nreturn cache",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: VisualizerCache)>"
}