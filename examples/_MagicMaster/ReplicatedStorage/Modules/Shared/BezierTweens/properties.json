{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: BezierTweens)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: BezierTweens)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: BezierTweens)>",
  "Sandboxed": false,
  "ScriptGuid": "{9F7D615A-C3AE-4793-AA70-F99D0C336AC8}",
  "Source": "--!strict\n-- Laserluzer \n-- September 17, 2021\n-- Sean was in my code\nlocal Bezier = {}\nBezier.__index = Bezier\n\n--// Constants \\\\--\n\nBezier.Waypoints = require(script.Waypoints)\nlocal Signal = require(script.Signal)\nlocal TweenService = game:GetService(\"TweenService\")\nlocal RunService = game:GetService(\"RunService\")\n\n--// Types \\\\--\n\nexport type BezierTweenInfo = {\n\tWaypoints : Waypoints,\n\tEasingStyle : Enum.EasingStyle,\n\tEasingDirection : Enum.EasingStyle,\n\tTime : number,\n}\n\nexport type Waypoints = {\n\t[number] : Vector3\n}\n\n--// Math functions \\\\--\n\n--@recursive\nlocal function factorial(n) : number\n\tif n == 0 then return 1 end\n\treturn n * factorial(n - 1)\nend\n\nlocal function binomial(n, i) : number\n\tlocal x : number = nil\n\tx = (factorial(n)) / \n\t\t(factorial(n - i) * factorial(i))\n\treturn x\nend\n\n--// Graphing functions \\\\--\n\nlocal function graphPoint(t : number, ... : Vector3) : Vector3\n\tassert(t >= 0 and t <= 1, t .. \"t is not between 0 and 1.\")\n\tlocal points = {...}\n\tlocal n : number = #points - 1\n\tlocal p : Vector3 = nil\n\tfor i = 0, n do\n\t\tlocal x = binomial(n,i)*(1 - t)^(n-i) * t^i * points[i+1] \n\t\tp = p and p + x or x\n\tend\n\treturn p\nend\n\n--// Main \\\\--\n\nfunction Bezier.Create(instance : Instance, Info : BezierTweenInfo) -- Creates a new bezier curve tween\n\tlocal self = setmetatable({}, Bezier)\n\t\n\tassert(#Info.Waypoints > 1, \"Bezier curve must have atleast 2 waypoints.\")\n\tassert(Info.EasingStyle ~= Enum.EasingStyle.Elastic, \"Elastic easing style not supported.\")\n\tassert(Info.EasingStyle ~= Enum.EasingStyle.Back, \"Back easing style not supported.\")\n\n\t-- User variables\n\tself.Instance = instance\n\tself.PlaybackState = Enum.PlaybackState.Begin\n\tself.TweenInfo = Info\n\n\t-- Events\n\tself.Played = Signal.new()\n\tself.Completed = Signal.new()\n\tself.Cancelled = Signal.new()\n\tself.Ended = Signal.new()\n\tself.Paused = Signal.new()\n\tself.Resumed = Signal.new()\n\n\t-- Private variables\n\tself._time = 0\n\tself._style = Info.EasingStyle or Enum.EasingStyle.Linear\n\tself._direction = Info.EasingDirection or Enum.EasingDirection.In\n\n\treturn self\nend\n\nfunction Bezier:Play() -- Plays bezier curve tween\n\tassert(not (self.PlaybackState == Enum.PlaybackState.Playing), \"Tween is already playing.\")\n\tassert(not (self.PlaybackState == Enum.PlaybackState.Cancelled), \"Tween is cancelled.\")\n\n\tself.Played:Fire()\n\tself.PlaybackState = Enum.PlaybackState.Playing\n\ttask.spawn(function()\n\t\tlocal x : number = self.TweenInfo.Time\n\t\t\n\t\twhile self._time < 1 do\n\t\t\tif not (self.PlaybackState == Enum.PlaybackState.Playing) then return end\n\t\t\tlocal alpha = TweenService:GetValue(self._time, self._style, self._direction)\n\n\t\t\tself.Instance.Position = graphPoint(alpha, unpack(self.TweenInfo.Waypoints))\n\t\t\t\n\t\t\tself._time += 1 / (60 * self.TweenInfo.Time)\n\t\t\tRunService.Heartbeat:Wait()\n\t\tend\n\n\t\tself.PlaybackState = Enum.PlaybackState.Completed\n\t\tself.Completed:Fire()\n\t\tself.Ended:Fire()\n\t\treturn \"Completed\"\n\tend)\nend\n\nfunction Bezier:Pause() -- Paused running tween\n\tif not (self.PlaybackState == Enum.PlaybackState.Paused) then\n\t\tself.PlaybackState = Enum.PlaybackState.Paused\n\t\tself.Paused:Fire()\n\tend\nend\n\nfunction Bezier:Resume() -- Resumes paused tween\n\tif self.PlaybackState == Enum.PlaybackState.Paused then\n\t\tself:Play()\n\t\tself.Resumed:Fire()\n\tend\nend\n\nfunction Bezier:Cancel() -- Destroys tween\n\tif not (self.PlaybackState == Enum.PlaybackState.Cancelled) then\n\t\tself.PlaybackState = Enum.PlaybackState.Cancelled\n\t\tself.Cancelled:Fire()\n\t\tself.Ended:Fire()\n\tend\nend\n\nreturn Bezier",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: BezierTweens)>"
}