{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: Styles)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: Styles)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: Styles)>",
  "Sandboxed": false,
  "ScriptGuid": "{BA535FB4-398E-46D7-BB76-6A391FA3CF75}",
  "Source": "local workspace = workspace\nlocal random = Random.new()\n\nlocal IgnoreList = {game.Players.LocalPlayer.Character, workspace.Effects} -- CHANGE THIS TO IGNORE SPECIFIC INSTANCES\n\nParams = RaycastParams.new()\nParams.FilterType = Enum.RaycastFilterType.Blacklist\nParams.FilterDescendantsInstances = IgnoreList\nParams.IgnoreWater = true\n\nlocal RunService = game:GetService('RunService')\nlocal TweenService = game:GetService('TweenService')\nlocal fullCircle = 2 * math.pi\n\nlocal Rocks = script.Parent:WaitForChild('Rocks')\nlocal Parent = workspace.Effects -- SET THE PARENT USING THIS\n\nlocal rayPart = function(CFrameValue, Range, Properties, ownPart)\n\t\n\tlocal Results = workspace:Raycast(CFrameValue.Position, -CFrameValue.UpVector * Range, Params)\n\t\n\tif Results then\n\t\tlocal Part = ownPart or Instance.new('Part')\n\t\tPart.Parent = Parent\n\t\tPart.Anchored = true\n\t\tPart.CanCollide = false\n\t\tPart.Material = Results.Material\n\t\tPart.Color = Results.Instance.Color\n\t\tPart.CFrame = CFrame.new(Results.Position)\n\t\tPart.Reflectance = Results.Instance.Reflectance\n\t\tPart.Transparency = Results.Instance.Transparency\n\t\tif Properties then\n\t\t\tfor property, value in ipairs( Properties ) do\n\t\t\t\tif Part[property] then\n\t\t\t\t\tPart[property] = value\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\treturn Part, Results\n\telse\n\t\treturn false\n\tend\nend\nlocal Wait = task.wait()\n\nlocal randInt = function(min, max)\n\treturn random:NextNumber(min, max)\nend\n\nlocal function lerp(a, b, x)\n\treturn a + (b - a) * x\nend\n\nlocal function getXAndZPositions(angle, radius,spi)\n\tlocal x = math.cos(angle) * radius + spi\n\tlocal z = math.sin(angle) * radius + spi\n\treturn x, z\nend\n\n\nreturn {\n\tCrater = function(AnchorPoint, settings)\n\t\tlocal partCount = settings.PartCount or 5\n\t\tlocal radius = settings.Radius or 5\n\t\tlocal range = settings.Range or 5\n\t\tlocal Angle = settings.Angle or 45\n\t\t\n\t\tlocal BlockSize = settings.BlockSize or {3, 5}\n\t\tfor i = 1, partCount do\n\t\t\tlocal angle = i * (fullCircle / partCount)\n\t\t\tlocal x, z = getXAndZPositions(angle, radius, 0)\n\t\t\tlocal Offset = (AnchorPoint) * Vector3.new(x, 0, z)\n\n\t\t\tlocal angle2 = (i + 1) * (fullCircle / partCount)\n\t\t\tlocal x2, z2 = getXAndZPositions(angle2, radius,0)\n\t\t\tlocal Offset2 = (AnchorPoint) * Vector3.new(x2,0,z2)\n\t\t\tlocal getRandom = randInt(BlockSize[1], BlockSize[2])\n\t\t\tlocal newSize = Vector3.new(getRandom * 2, getRandom, getRandom * 1.25)\n\t\t\tlocal Part = rayPart(CFrame.new(Offset),  range, {Size = newSize})\n\t\t\t\n\t\t\tif Part then\n\t\t\t\tPart.Name = 'CraterPart-'..i\n\t\t\t\tlocal cframeTo = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z)) * CFrame.fromEulerAnglesXYZ(math.rad(Angle),0,0)\n\t\t\t\tPart.CFrame = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z))\n\n\t\t\t\tPart.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)\n\n\t\t\t\tTweenService:Create(Part, TweenInfo.new(settings.AnimationSpeed or 0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {CFrame = cframeTo}):Play()\n\t\t\t\ttask.spawn(function()\n\t\t\t\t\ttask.wait(settings.HoldTime)\n\t\t\t\t\tlocal Tween = TweenService:Create(Part, TweenInfo.new(randInt(1, 2), Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = Vector3.new(0,0,0)})\n\t\t\t\t\tTween:Play()\n\t\t\t\t\tTween.Completed:Wait()\n\t\t\t\t\tPart:Destroy()\n\t\t\t\tend)\n\t\t\tend\n\t\tend\n\tend,\n}",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: Styles)>"
}