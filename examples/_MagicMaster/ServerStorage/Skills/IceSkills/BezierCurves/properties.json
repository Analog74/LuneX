{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: BezierCurves)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: BezierCurves)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: BezierCurves)>",
  "Sandboxed": false,
  "ScriptGuid": "{B3ED16D6-2B24-4F35-896B-056A711966EC}",
  "Source": "--[[\n\tThis is a bezierCurve module that will perform the Bezier Curve algorithm on any data type that\n\tsupports basic arithmetic operations.\n\t\n\tCredit to Magnalite for helping me out.\n\t\n\tThis documentation will describe each bezierCurve function then will explain the interpolation function.\n\t\n\t--BezierCurve.Linear--\n\tThis is the equivalent of Linear interpolation.\n\tPercent = Percentage to completion. (0%-100%)\n\tP0 = Start Value\n\tP1 = End Value\n\tIns = The instance you are performing the formula on.\n\tProperty = The property of the instance you are wanting to change.\n\t\n\t--Example of Linear--\n\tlocal curve = require(workspace.BezierCurves)\n\tcurve.Linear(50,workspace.Part.Position,Vector3.new(0,100,0),workspace.Part,\"Position\")\n\t\n\t--BezierCurve.Quadratic--\n\tThis uses a control point to affect the interpolation between the start and end point.\n\tThis is the equivalent of Linear interpolation.\n\tPercent = Percentage to completion. (0%-100%)\n\tP0 = Start Value\n\tP1 = Control Value\n\tP2 = End Value\n\tIns = The instance you are performing the formula on.\n\tProperty = The property of the instance you are wanting to change.\n\t\n\t--Example of Quadratic--\n\tlocal curve = require(workspace.BezierCurves)\n\tcurve.Quadratic(50,workspace.Part.Position,Vector3.new(0,100,0),Vector3.new(10,10,10),workspace.Part,\"Position\")\n\t\n\t--BezierCurve.Cubic--\n\tThis uses two control points to affect the interpolation between start and end point.\n\tPercent = Percentage to completion. (0%-100%)\n\tP0 = Start Value\n\tP1 = Control Value\n\tP2 = Control Value\n\tP3 = End Value\n\tIns = The instance you are performing the formula on.\n\tProperty = The property of the instance you are wanting to change.\n\t\n\t--Example of Cubic--\n\tlocal curve = require(workspace.BezierCurves)\n\tcurve.Cubic(50,workspace.Part.Position,Vector3.new(0,100,0),Vector3.new(50,0,25),Vector3.new(10,10,10),workspace.Part,\"Position\")\n\t\n\t*Note*\n\tUsing the BezierCurve formulas in this module will result in an instant change.\n\tUse BezierCurve.Interpolate for a smooth tween to the percentage or use your own interpolate function.\n\tNot supplying an instance and property for the regular bezier functions will result in the function returning the value,\n\twhich allows you to interpolate yourself.\n\tAlso call the function in a spawn function or coroutine if you don't want it to affect yield your script.\n\tInterpolating CFrames only interpolates the positions. Rotation matrix is untouched.\n\t\n\t--BezierCurve.Interpolate--\n\tThis will smoothly interpolate/tween from a start percentage to the desired percentage of the formula.\n\tMethod = Desired type of curve to perform. (Linear, Quadratic, or Cubic)\n\tStartPercent = Percent of the tween to start at. (0%-100%)\n\tEndPercent = Percent of the tween to end at. (0%-100%)\n\tDuration = Time it takes to complete the tween in seconds.\n\tCallback = function that will be called when the tween is over.\n\t... = Once you supply the arguments for the interpolate function, supply the arguments for the\n\ttween function. Ex Cubic (Percent,Ins,Property,P0,P1,P2,P3)\n\t\n\t--Example of Interpolate--\n\tlocal curve = require(workspace.BezierCurves)\n\tfunction TweenFinished()\n\t\tprint(\"Finished\")\n\tend\n\tcurve.Interpolate(\"Cubic\",0,100,5,TweenFinished,workspace.Part.Position,Vector3.new(0,100,0),Vector3.new(50,0,25),Vector3.new(10,10,10),workspace.Part,\"Position\")\n--]]\n\n\n\n\n\n\nlocal BezierCurve = {}\n\nfunction BezierCurve.Linear(Percent,P0,P1,Ins,Property)\n\tlocal t = Percent/100\n\tt = t >= 1 and 1 or t\n\tif P0 and P1 then\n\t\tif Ins and Ins[Property] then\n\t\t\tif Property == \"CFrame\" then\n\t\t\t\tlocal P0 = P0.p\n\t\t\t\tlocal P1 = P1.p\n\t\t\t\tIns[Property] = CFrame.new(P0 + t * (P1-P0))\n\t\t\telse\n\t\t\t\tIns[Property] = P0 + t * (P1-P0)\n\t\t\tend\n\t\telse\n\t\t\treturn P0 + t * (P1-P0)\n\t\tend\n\tend\nend\n\nfunction BezierCurve.Quadratic(Percent,P0,P1,P2,Ins,Property)\n\tlocal t = Percent/100\n\tt = t >= 1 and 1 or t\n\tif P0 and P1 and P2 then\n\t\tif Ins and Ins[Property] then\n\t\t\tif Property == \"CFrame\" then\n\t\t\t\tlocal P0 = P0.p\n\t\t\t\tlocal P1 = P1.p\n\t\t\t\tlocal P2 = P2.p\n\t\t\t\tIns[Property] = CFrame.new((1-t)^2 * P0 + 2 * (1-t) * t * P1 + t^2 * P2)\n\t\t\telse\n\t\t\t\tIns[Property] = (1-t)^2 * P0 + 2 * (1-t) * t * P1 + t^2 * P2\n\t\t\tend\n\t\telse\n\t\t\treturn (1-t)^2 * P0 + 2 * (1-t) * t * P1 + t^2 * P2\n\t\tend\n\tend\nend\n\nfunction BezierCurve.Cubic(Percent,P0,P1,P2,P3,Ins,Property)\n\tlocal t = Percent/100\n\tt = t >= 1 and 1 or t\n\tif P0 and P1 and P2 and P3 then\n\t\tif Ins and Ins[Property] then\n\t\t\tif Property == \"CFrame\" then\n\t\t\t\tlocal P0 = P0.p\n\t\t\t\tlocal P1 = P1.p\n\t\t\t\tlocal P2 = P2.p\n\t\t\t\tlocal P3 = P3.p\n\t\t\t\tIns[Property] = CFrame.new((1-t)^3 * P0 + 3 * (1-t)^2 * t * P1 + 3 * (1-t) * t^2 * P2 + t^3 * P3)\n\t\t\telse\n\t\t\t\tIns[Property] = (1-t)^3 * P0 + 3 * (1-t)^2 * t * P1 + 3 * (1-t) * t^2 * P2 + t^3 * P3\n\t\t\tend\n\t\telse\n\t\t\treturn (1-t)^3 * P0 + 3 * (1-t)^2 * t * P1 + 3 * (1-t) * t^2 * P2 + t^3 * P3\n\t\tend\n\tend\nend\n\nfunction BezierCurve.Interpolate(Method,StartPercent,DesiredPercent,Duration,Callback,...)\n\tlocal Start = tick()\n\tlocal EndTime = Start + Duration\n\tlocal PercentDif =  DesiredPercent - StartPercent\n\twhile tick() < EndTime do\n\t\twait()\n\t\tlocal NewPercent = StartPercent + PercentDif * ((tick()-Start)/Duration)\n\t\tif Method == \"Linear\" then\n\t\t\tBezierCurve.Linear(NewPercent,...)\n\t\telseif Method == \"Quadratic\" then\n\t\t\tBezierCurve.Quadratic(NewPercent,...)\n\t\telseif Method == \"Cubic\" then\n\t\t\tBezierCurve.Cubic(NewPercent,...)\n\t\tend\n\tend\n\tif Callback then\n\t\tCallback()\n\tend\nend\nreturn BezierCurve\n",
  "SourceAssetId": -1,
  "Tags": [],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: BezierCurves)>"
}