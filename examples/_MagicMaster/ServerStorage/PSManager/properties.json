{
  "Attributes": {},
  "Capabilities": "<FAILED: Unsupported variant type: Discriminant(37) (property: Capabilities, class: ModuleScript, instance: PSManager)>",
  "HistoryId": "<FAILED: Unsupported variant type: Discriminant(35) (property: HistoryId, class: ModuleScript, instance: PSManager)>",
  "LinkedSource": "<FAILED: Unsupported variant type: Discriminant(8) (property: LinkedSource, class: ModuleScript, instance: PSManager)>",
  "Sandboxed": false,
  "ScriptGuid": "{9AFC8B1E-F806-4868-964D-803A20E56E80}",
  "Source": "\n--[[\n\tMade by EmeraldLimes, April 6th, 2021\n\tUpdated August 24th, 2021\n\tDevForum post: https://devforum.roblox.com/t/1435596\n\t\n\tEnjoy!\n]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocal PSManagerSettings = script._PSManagerSettings.Value\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocal PROFILE_STORE_DEFAULTS\nlocal DEFAULT_NRH\nlocal PROCESS_PROFILE_KEY_DICTIONARY\n\nif (PSManagerSettings) then\n\tPSManagerSettings = require(PSManagerSettings)\n\tPROFILE_STORE_DEFAULTS = PSManagerSettings.PROFILE_STORE_DEFAULTS\n\tDEFAULT_NRH = PSManagerSettings.DEFAULT_NRH\n\tPROCESS_PROFILE_KEY_DICTIONARY = PSManagerSettings.PROCESS_PROFILE_KEY_DICTIONARY\nelse\n\twarn(\"[PSManager] Missing PSManagerSettings, did you set the object value of _PSManagerSettings to your PSManagerSettings?\")\n\tscript:Destroy()\nend\n\nlocal PLRS = game:GetService(\"Players\")\nlocal PS = require(script:WaitForChild(\"ProfileService\"))\nlocal PSManager = {}\n\nlocal ProfileStores = {}\nlocal loadedPlayers = {}\nlocal fullyLoadedPlayers = {}\n\nlocal tfind = table.find\nlocal tinsert = table.insert\nlocal tremove = table.remove\n\nlocal noPlrMsg = \"[PSManager] expected Instance Player, got %s %s\"\n\nlocal function processProfileKey(plr,key)\n\tlocal dictionary = PROCESS_PROFILE_KEY_DICTIONARY(plr)\n\t\n\tfor keyWord,replacement in pairs(dictionary) do\n\t\tlocal start,ending = string.find(key,keyWord)\n\t\tif (not start) or (not ending) then continue end\n\t\t\n\t\tstart = start - 1\n\t\tending = ending + 1\n\t\t\n\t\tmath.clamp(start,0,#key)\n\t\tmath.clamp(ending,0,#key)\n\t\t\n\t\tlocal before = string.sub(key,0,start)\n\t\tlocal after = string.sub(key,ending,#key)\n\t\tlocal processed = before..replacement..after\n\t\t\n\t\tkey = processed\n\tend\n\t\n\treturn key\nend\n\nlocal function loadStore(storeName)\n\tProfileStores[storeName] = PS.GetProfileStore(\n\t\tstoreName,\n\t\tPROFILE_STORE_DEFAULTS[storeName]\n\t)\n\treturn ProfileStores[storeName]\nend\n\nlocal function loadPlayer(plr)\n\tif (tfind(loadedPlayers,plr)) then return end\n\ttinsert(loadedPlayers,plr)\n\t\n\tfor storeName,storeDefaults in pairs(PROFILE_STORE_DEFAULTS) do\n\t\tlocal store = ProfileStores[storeName]\n\t\tif (not store) then\n\t\t\tstore = loadStore(storeName)\n\t\tend\n\t\t\n\t\tif (not storeDefaults._playerProfileKey) then\n\t\t\twarn(\n\t\t\t\t\"[PSManager] Could not load store \"\n\t\t\t\t..storeName..\n\t\t\t\t\" profile for [\"\n\t\t\t\t..plr.Name..\n\t\t\t\t\"(\"\n\t\t\t\t..plr.UserId..\n\t\t\t\t\")] due to missing _playerProfileKey\"\n\t\t\t)\n\t\t\tcontinue\n\t\tend\n\t\tlocal profileKey = processProfileKey(plr,storeDefaults._playerProfileKey)\n\t\tlocal profile = store:LoadProfileAsync(\n\t\t\tprofileKey,\n\t\t\tDEFAULT_NRH\n\t\t)\n\n\t\tif profile ~= nil then\n\t\t\tprofile:Reconcile()\n\t\t\tprofile:ListenToRelease(function()\n\t\t\t\tstore[plr] = nil\n\t\t\t\tplr:Kick(\"profile released\")\n\t\t\tend)\n\t\t\tif plr:IsDescendantOf(PLRS) == true then\n\t\t\t\t\n\t\t\t\tlocal dummy = {\n\t\t\t\t\tData = {},\n\t\t\t\t\tCallbacks = {}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tdummy.Data.__index = function(t,i)\n\t\t\t\t\treturn profile.Data[i]\n\t\t\t\tend\n\t\t\t\tdummy.Data.__newindex = function(t,i,v)\n\t\t\t\t\tprofile.Data[i] = v\n\t\t\t\t\t\n\t\t\t\t\tif (not dummy.Callbacks) or (dummy.Callbacks[i] and #dummy.Callbacks[i] < 1) then return end\n\t\t\t\t\tfor _ , callback in ipairs(dummy.Callbacks[i]) do\n\t\t\t\t\t\tspawn(function()\n\t\t\t\t\t\t\tcallback(v)\n\t\t\t\t\t\tend)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tdummy.__index = function(t,i)\n\t\t\t\t\tif (i ~= \"Data\") then\n\t\t\t\t\t\treturn profile[i]\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tdummy.__newindex = function(t,i,v)\n\t\t\t\t\tprofile[i] = v\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tsetmetatable(dummy.Data,dummy.Data)\n\t\t\t\tsetmetatable(dummy,dummy)\n\t\t\t\t\n\t\t\t\tfunction dummy:OnDataValueChanged(ValueName,callback)\n\t\t\t\t\tif (not dummy.Callbacks[ValueName]) then\n\t\t\t\t\t\tdummy.Callbacks[ValueName] = {}\n\t\t\t\t\tend\n\t\t\t\t\ttable.insert(dummy.Callbacks[ValueName],callback)\n\t\t\t\t\t\n\t\t\t\t\tlocal Connection = {}\n\t\t\t\t\tfunction Connection:Disconnect()\n\t\t\t\t\t\ttable.remove(dummy.Callbacks[ValueName],table.find(dummy.Callbacks[ValueName],callback))\n\t\t\t\t\tend\n\t\t\t\t\treturn Connection\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tfunction dummy:LinkDataToValue(ValueName, Value)\n\t\t\t\t\tif (not Value) or (Value and not Value:IsA(\"ValueBase\")) then\n\t\t\t\t\t\twarn(\"[PSManager] ValueBase object expected, got \"..Value.ClassName..\" \"..Value.Name)\n\t\t\t\t\t\treturn\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tValue.Changed:Connect(function(newValue)\n\t\t\t\t\t\tdummy.Data[ValueName] = newValue\n\t\t\t\t\tend)\n\t\t\t\t\t\n\t\t\t\t\tdummy.Data[ValueName] = Value.Value\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tstore[plr] = dummy\n\t\t\telse\n\t\t\t\tprofile:Release()\n\t\t\tend\n\t\telse\n\t\t\tplr:Kick(\"[PSManager] Could not reteieve player data, please rejoin.\") \n\t\tend\n\tend\n\t\n\t\n\t\n\ttinsert(fullyLoadedPlayers,plr)\nend\nPLRS.PlayerAdded:Connect(loadPlayer)\n\nfor _,plr in pairs(PLRS:GetPlayers()) do\n\tcoroutine.wrap(loadPlayer)(plr)\nend\n\nPLRS.PlayerRemoving:Connect(function(plr)\n\tif (not tfind(loadedPlayers,plr)) then return end\n\ttremove(loadedPlayers,tfind(loadedPlayers,plr))\n\n\tif (tfind(fullyLoadedPlayers,plr)) then\n\t\ttremove(fullyLoadedPlayers,tfind(fullyLoadedPlayers,plr))\n\tend\n\t\n\tfor storeName,store in pairs(ProfileStores) do\n\t\tif (typeof(store) ~= \"table\") or (typeof(store) == \"table\" and not store[plr]) then continue end\n\t\t\n\t\tstore[plr]:Release()\n\t\tstore[plr] = nil\n\t\ttremove(store,tfind(store,plr))\n\tend\nend)\n\nfunction ProfileStores:WaitForPlayerLoaded(plr)\n\tassert(\n\t\tplr and typeof(plr) == \"Instance\" and (plr and plr:IsA(\"Player\")),\n\t\t(noPlrMsg)\n\t\t:format(\n\t\t\ttypeof(plr),\n\t\t\t(plr and plr.ClassName or \"nil\")\n\t\t)\n\t)\n\t\n\tif (tfind(fullyLoadedPlayers,plr)) then return end\n\trepeat task.wait() until tfind(fullyLoadedPlayers,plr) or not plr\nend\n\nfunction ProfileStores:FetchProfile(storeName,plr)\n\tassert(\n\t\tplr and typeof(plr) == \"Instance\" and (plr and plr:IsA(\"Player\")),\n\t\t(noPlrMsg)\n\t\t:format(\n\t\t\ttypeof(plr),\n\t\t\t(plr and plr.ClassName or \"nil\")\n\t\t)\n\t)\n\t\n\tself:WaitForPlayerLoaded(plr)\n\treturn self[storeName][plr]\nend\n\nfunction ProfileStores:FetchProfileStore(storeName)\n\tif (not self[storeName]) then loadStore(storeName) end\n\treturn self[storeName]\nend\n\nreturn ProfileStores\n",
  "SourceAssetId": -1,
  "Tags": [
    "//__PSManager"
  ],
  "UniqueId": "<FAILED: Unsupported variant type: Discriminant(35) (property: UniqueId, class: ModuleScript, instance: PSManager)>"
}